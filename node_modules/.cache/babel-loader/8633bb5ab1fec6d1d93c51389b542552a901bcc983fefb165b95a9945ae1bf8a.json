{"ast":null,"code":"import HealthDataController from'../controllers/HealthDataController';/**\r\n * WeeklySummaryPresenter - Handles presenting data for the Weekly Summary view\r\n */class WeeklySummaryPresenter{constructor(){this.healthDataController=new HealthDataController();}/**\r\n   * Get weekly summary data\r\n   * @returns {Object} - Weekly summary data\r\n   */getWeeklySummaryData(){const endDate=new Date();const startDate=new Date();startDate.setDate(endDate.getDate()-7);const summary=this.healthDataController.getHealthSummary(startDate,endDate);const narrative=this.healthDataController.getWeeklyNarrative();// Get daily data for charts\nconst sleepData=this.healthDataController.healthData.getHealthMetricsInRange('sleep',startDate,endDate);const activityData=this.healthDataController.healthData.getHealthMetricsInRange('activity',startDate,endDate);const journalEntries=this.healthDataController.healthData.getJournalEntriesInRange(startDate,endDate);// Format chart data\nconst chartData={labels:this.getDayLabels(startDate,endDate),sleep:this.formatDailyData(sleepData,'duration'),steps:this.formatDailyData(activityData,'steps'),mood:this.formatDailyData(journalEntries,'mood'),energy:this.formatDailyData(journalEntries,'energy')};return{summary,narrative,chartData};}/**\r\n   * Get day labels for chart\r\n   * @param {Date} startDate - Start date\r\n   * @param {Date} endDate - End date\r\n   * @returns {Array} - Array of day labels\r\n   */getDayLabels(startDate,endDate){const days=[];const currentDate=new Date(startDate);while(currentDate<=endDate){days.push(this.formatDateLabel(currentDate));currentDate.setDate(currentDate.getDate()+1);}return days;}/**\r\n   * Format daily data for charts\r\n   * @param {Array} data - Array of data entries\r\n   * @param {String} valueKey - The key to extract values from\r\n   * @returns {Array} - Formatted daily values\r\n   */formatDailyData(data,valueKey){const dayValues={};// Initialize with empty values\nconst days=this.getDayLabels(new Date(new Date().setDate(new Date().getDate()-7)),new Date());days.forEach(day=>{dayValues[day]=null;});// Fill in actual values\ndata.forEach(item=>{const date=this.formatDateLabel(new Date(item.timestamp));if(dayValues[date]!==undefined){// For journal entries, use the value directly\nif(valueKey==='mood'||valueKey==='energy'){dayValues[date]=item[valueKey];}else{// For health metrics, access the property\ndayValues[date]=item[valueKey];}}});return Object.values(dayValues);}/**\r\n   * Format date as a label (e.g., \"Mon 3/29\")\r\n   * @param {Date} date - The date to format\r\n   * @returns {String} - Formatted date label\r\n   */formatDateLabel(date){const days=['Sun','Mon','Tue','Wed','Thu','Fri','Sat'];return`${days[date.getDay()]} ${date.getMonth()+1}/${date.getDate()}`;}}export default WeeklySummaryPresenter;","map":{"version":3,"names":["HealthDataController","WeeklySummaryPresenter","constructor","healthDataController","getWeeklySummaryData","endDate","Date","startDate","setDate","getDate","summary","getHealthSummary","narrative","getWeeklyNarrative","sleepData","healthData","getHealthMetricsInRange","activityData","journalEntries","getJournalEntriesInRange","chartData","labels","getDayLabels","sleep","formatDailyData","steps","mood","energy","days","currentDate","push","formatDateLabel","data","valueKey","dayValues","forEach","day","item","date","timestamp","undefined","Object","values","getDay","getMonth"],"sources":["C:/Users/xiezh/OneDrive/Desktop/code/mlh-hackathon/hoohacks/health_sync_flutter/src/presenters/WeeklySummaryPresenter.js"],"sourcesContent":["import HealthDataController from '../controllers/HealthDataController';\r\n\r\n/**\r\n * WeeklySummaryPresenter - Handles presenting data for the Weekly Summary view\r\n */\r\nclass WeeklySummaryPresenter {\r\n  constructor() {\r\n    this.healthDataController = new HealthDataController();\r\n  }\r\n\r\n  /**\r\n   * Get weekly summary data\r\n   * @returns {Object} - Weekly summary data\r\n   */\r\n  getWeeklySummaryData() {\r\n    const endDate = new Date();\r\n    const startDate = new Date();\r\n    startDate.setDate(endDate.getDate() - 7);\r\n    \r\n    const summary = this.healthDataController.getHealthSummary(startDate, endDate);\r\n    const narrative = this.healthDataController.getWeeklyNarrative();\r\n    \r\n    // Get daily data for charts\r\n    const sleepData = this.healthDataController.healthData.getHealthMetricsInRange('sleep', startDate, endDate);\r\n    const activityData = this.healthDataController.healthData.getHealthMetricsInRange('activity', startDate, endDate);\r\n    const journalEntries = this.healthDataController.healthData.getJournalEntriesInRange(startDate, endDate);\r\n    \r\n    // Format chart data\r\n    const chartData = {\r\n      labels: this.getDayLabels(startDate, endDate),\r\n      sleep: this.formatDailyData(sleepData, 'duration'),\r\n      steps: this.formatDailyData(activityData, 'steps'),\r\n      mood: this.formatDailyData(journalEntries, 'mood'),\r\n      energy: this.formatDailyData(journalEntries, 'energy')\r\n    };\r\n    \r\n    return {\r\n      summary,\r\n      narrative,\r\n      chartData\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get day labels for chart\r\n   * @param {Date} startDate - Start date\r\n   * @param {Date} endDate - End date\r\n   * @returns {Array} - Array of day labels\r\n   */\r\n  getDayLabels(startDate, endDate) {\r\n    const days = [];\r\n    const currentDate = new Date(startDate);\r\n    \r\n    while (currentDate <= endDate) {\r\n      days.push(this.formatDateLabel(currentDate));\r\n      currentDate.setDate(currentDate.getDate() + 1);\r\n    }\r\n    \r\n    return days;\r\n  }\r\n\r\n  /**\r\n   * Format daily data for charts\r\n   * @param {Array} data - Array of data entries\r\n   * @param {String} valueKey - The key to extract values from\r\n   * @returns {Array} - Formatted daily values\r\n   */\r\n  formatDailyData(data, valueKey) {\r\n    const dayValues = {};\r\n    \r\n    // Initialize with empty values\r\n    const days = this.getDayLabels(\r\n      new Date(new Date().setDate(new Date().getDate() - 7)),\r\n      new Date()\r\n    );\r\n    days.forEach(day => {\r\n      dayValues[day] = null;\r\n    });\r\n    \r\n    // Fill in actual values\r\n    data.forEach(item => {\r\n      const date = this.formatDateLabel(new Date(item.timestamp));\r\n      if (dayValues[date] !== undefined) {\r\n        // For journal entries, use the value directly\r\n        if (valueKey === 'mood' || valueKey === 'energy') {\r\n          dayValues[date] = item[valueKey];\r\n        } else {\r\n          // For health metrics, access the property\r\n          dayValues[date] = item[valueKey];\r\n        }\r\n      }\r\n    });\r\n    \r\n    return Object.values(dayValues);\r\n  }\r\n\r\n  /**\r\n   * Format date as a label (e.g., \"Mon 3/29\")\r\n   * @param {Date} date - The date to format\r\n   * @returns {String} - Formatted date label\r\n   */\r\n  formatDateLabel(date) {\r\n    const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n    return `${days[date.getDay()]} ${date.getMonth() + 1}/${date.getDate()}`;\r\n  }\r\n}\r\n\r\nexport default WeeklySummaryPresenter;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}