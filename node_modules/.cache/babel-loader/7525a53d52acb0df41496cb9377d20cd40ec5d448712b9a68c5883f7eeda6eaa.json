{"ast":null,"code":"/**\n * HealthData model - Represents the core health data structure\n */\nclass HealthData {\n  constructor() {\n    this.journalEntries = [];\n    this.healthMetrics = {\n      sleep: [],\n      activity: [],\n      heartRate: []\n    };\n  }\n\n  /**\n   * Add a new journal entry\n   * @param {Object} entry - The journal entry to add\n   */\n  addJournalEntry(entry) {\n    // Generate an ID if none exists\n    if (!entry.id) {\n      entry.id = Date.now().toString();\n    }\n\n    // Add timestamp if none exists\n    if (!entry.timestamp) {\n      entry.timestamp = new Date().toISOString();\n    }\n    this.journalEntries.push(entry);\n    return entry;\n  }\n\n  /**\n   * Get journal entries within a date range\n   * @param {Date} startDate - Start of the date range\n   * @param {Date} endDate - End of the date range\n   * @returns {Array} - Filtered journal entries\n   */\n  getJournalEntriesInRange(startDate, endDate) {\n    return this.journalEntries.filter(entry => {\n      const entryDate = new Date(entry.timestamp);\n      return entryDate >= startDate && entryDate <= endDate;\n    });\n  }\n\n  /**\n   * Add health metrics\n   * @param {String} type - Type of health metric (sleep, activity, heartRate)\n   * @param {Object} data - The metric data\n   */\n  addHealthMetric(type, data) {\n    if (!this.healthMetrics[type]) {\n      this.healthMetrics[type] = [];\n    }\n\n    // Add timestamp if none exists\n    if (!data.timestamp) {\n      data.timestamp = new Date().toISOString();\n    }\n    this.healthMetrics[type].push(data);\n    return data;\n  }\n\n  /**\n   * Get health metrics within a date range\n   * @param {String} type - Type of health metric\n   * @param {Date} startDate - Start of the date range\n   * @param {Date} endDate - End of the date range\n   * @returns {Array} - Filtered health metrics\n   */\n  getHealthMetricsInRange(type, startDate, endDate) {\n    if (!this.healthMetrics[type]) {\n      return [];\n    }\n    return this.healthMetrics[type].filter(metric => {\n      const metricDate = new Date(metric.timestamp);\n      return metricDate >= startDate && metricDate <= endDate;\n    });\n  }\n}\nexport default HealthData;","map":{"version":3,"names":["HealthData","constructor","journalEntries","healthMetrics","sleep","activity","heartRate","addJournalEntry","entry","id","Date","now","toString","timestamp","toISOString","push","getJournalEntriesInRange","startDate","endDate","filter","entryDate","addHealthMetric","type","data","getHealthMetricsInRange","metric","metricDate"],"sources":["/Users/kooshapari/temp-PRODVERCEL/hoohacks/tester/src/models/HealthData.js"],"sourcesContent":["/**\n * HealthData model - Represents the core health data structure\n */\nclass HealthData {\n  constructor() {\n    this.journalEntries = [];\n    this.healthMetrics = {\n      sleep: [],\n      activity: [],\n      heartRate: []\n    };\n  }\n\n  /**\n   * Add a new journal entry\n   * @param {Object} entry - The journal entry to add\n   */\n  addJournalEntry(entry) {\n    // Generate an ID if none exists\n    if (!entry.id) {\n      entry.id = Date.now().toString();\n    }\n    \n    // Add timestamp if none exists\n    if (!entry.timestamp) {\n      entry.timestamp = new Date().toISOString();\n    }\n    \n    this.journalEntries.push(entry);\n    return entry;\n  }\n\n  /**\n   * Get journal entries within a date range\n   * @param {Date} startDate - Start of the date range\n   * @param {Date} endDate - End of the date range\n   * @returns {Array} - Filtered journal entries\n   */\n  getJournalEntriesInRange(startDate, endDate) {\n    return this.journalEntries.filter(entry => {\n      const entryDate = new Date(entry.timestamp);\n      return entryDate >= startDate && entryDate <= endDate;\n    });\n  }\n\n  /**\n   * Add health metrics\n   * @param {String} type - Type of health metric (sleep, activity, heartRate)\n   * @param {Object} data - The metric data\n   */\n  addHealthMetric(type, data) {\n    if (!this.healthMetrics[type]) {\n      this.healthMetrics[type] = [];\n    }\n    \n    // Add timestamp if none exists\n    if (!data.timestamp) {\n      data.timestamp = new Date().toISOString();\n    }\n    \n    this.healthMetrics[type].push(data);\n    return data;\n  }\n\n  /**\n   * Get health metrics within a date range\n   * @param {String} type - Type of health metric\n   * @param {Date} startDate - Start of the date range\n   * @param {Date} endDate - End of the date range\n   * @returns {Array} - Filtered health metrics\n   */\n  getHealthMetricsInRange(type, startDate, endDate) {\n    if (!this.healthMetrics[type]) {\n      return [];\n    }\n    \n    return this.healthMetrics[type].filter(metric => {\n      const metricDate = new Date(metric.timestamp);\n      return metricDate >= startDate && metricDate <= endDate;\n    });\n  }\n}\n\nexport default HealthData;\n"],"mappings":"AAAA;AACA;AACA;AACA,MAAMA,UAAU,CAAC;EACfC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,cAAc,GAAG,EAAE;IACxB,IAAI,CAACC,aAAa,GAAG;MACnBC,KAAK,EAAE,EAAE;MACTC,QAAQ,EAAE,EAAE;MACZC,SAAS,EAAE;IACb,CAAC;EACH;;EAEA;AACF;AACA;AACA;EACEC,eAAeA,CAACC,KAAK,EAAE;IACrB;IACA,IAAI,CAACA,KAAK,CAACC,EAAE,EAAE;MACbD,KAAK,CAACC,EAAE,GAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC;IAClC;;IAEA;IACA,IAAI,CAACJ,KAAK,CAACK,SAAS,EAAE;MACpBL,KAAK,CAACK,SAAS,GAAG,IAAIH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC;IAC5C;IAEA,IAAI,CAACZ,cAAc,CAACa,IAAI,CAACP,KAAK,CAAC;IAC/B,OAAOA,KAAK;EACd;;EAEA;AACF;AACA;AACA;AACA;AACA;EACEQ,wBAAwBA,CAACC,SAAS,EAAEC,OAAO,EAAE;IAC3C,OAAO,IAAI,CAAChB,cAAc,CAACiB,MAAM,CAACX,KAAK,IAAI;MACzC,MAAMY,SAAS,GAAG,IAAIV,IAAI,CAACF,KAAK,CAACK,SAAS,CAAC;MAC3C,OAAOO,SAAS,IAAIH,SAAS,IAAIG,SAAS,IAAIF,OAAO;IACvD,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;EACEG,eAAeA,CAACC,IAAI,EAAEC,IAAI,EAAE;IAC1B,IAAI,CAAC,IAAI,CAACpB,aAAa,CAACmB,IAAI,CAAC,EAAE;MAC7B,IAAI,CAACnB,aAAa,CAACmB,IAAI,CAAC,GAAG,EAAE;IAC/B;;IAEA;IACA,IAAI,CAACC,IAAI,CAACV,SAAS,EAAE;MACnBU,IAAI,CAACV,SAAS,GAAG,IAAIH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC;IAC3C;IAEA,IAAI,CAACX,aAAa,CAACmB,IAAI,CAAC,CAACP,IAAI,CAACQ,IAAI,CAAC;IACnC,OAAOA,IAAI;EACb;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;EACEC,uBAAuBA,CAACF,IAAI,EAAEL,SAAS,EAAEC,OAAO,EAAE;IAChD,IAAI,CAAC,IAAI,CAACf,aAAa,CAACmB,IAAI,CAAC,EAAE;MAC7B,OAAO,EAAE;IACX;IAEA,OAAO,IAAI,CAACnB,aAAa,CAACmB,IAAI,CAAC,CAACH,MAAM,CAACM,MAAM,IAAI;MAC/C,MAAMC,UAAU,GAAG,IAAIhB,IAAI,CAACe,MAAM,CAACZ,SAAS,CAAC;MAC7C,OAAOa,UAAU,IAAIT,SAAS,IAAIS,UAAU,IAAIR,OAAO;IACzD,CAAC,CAAC;EACJ;AACF;AAEA,eAAelB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}