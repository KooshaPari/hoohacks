{"ast":null,"code":"import HealthDataController from '../controllers/HealthDataController';\n\n/**\n * DashboardPresenter - Handles presenting data for the Dashboard view\n */\nclass DashboardPresenter {\n  constructor() {\n    this.healthDataController = new HealthDataController();\n  }\n\n  /**\n   * Get dashboard data\n   * @returns {Object} - Dashboard data\n   */\n  getDashboardData() {\n    const today = new Date();\n    const startDate = new Date();\n    startDate.setDate(today.getDate() - 7);\n    const summary = this.healthDataController.getHealthSummary(startDate, today);\n    const recentEntries = this.healthDataController.healthData.getJournalEntriesInRange(startDate, today).sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp)).slice(0, 3);\n    return {\n      summary,\n      recentEntries,\n      weeklyNarrative: this.healthDataController.getWeeklyNarrative()\n    };\n  }\n}\nexport default DashboardPresenter;","map":{"version":3,"names":["HealthDataController","DashboardPresenter","constructor","healthDataController","getDashboardData","today","Date","startDate","setDate","getDate","summary","getHealthSummary","recentEntries","healthData","getJournalEntriesInRange","sort","a","b","timestamp","slice","weeklyNarrative","getWeeklyNarrative"],"sources":["/Users/kooshapari/temp-PRODVERCEL/hoohacks/tester/src/presenters/DashboardPresenter.js"],"sourcesContent":["import HealthDataController from '../controllers/HealthDataController';\n\n/**\n * DashboardPresenter - Handles presenting data for the Dashboard view\n */\nclass DashboardPresenter {\n  constructor() {\n    this.healthDataController = new HealthDataController();\n  }\n\n  /**\n   * Get dashboard data\n   * @returns {Object} - Dashboard data\n   */\n  getDashboardData() {\n    const today = new Date();\n    const startDate = new Date();\n    startDate.setDate(today.getDate() - 7);\n    \n    const summary = this.healthDataController.getHealthSummary(startDate, today);\n    const recentEntries = this.healthDataController.healthData.getJournalEntriesInRange(\n      startDate, today\n    ).sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp)).slice(0, 3);\n    \n    return {\n      summary,\n      recentEntries,\n      weeklyNarrative: this.healthDataController.getWeeklyNarrative()\n    };\n  }\n}\n\nexport default DashboardPresenter;\n"],"mappings":"AAAA,OAAOA,oBAAoB,MAAM,qCAAqC;;AAEtE;AACA;AACA;AACA,MAAMC,kBAAkB,CAAC;EACvBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,oBAAoB,GAAG,IAAIH,oBAAoB,CAAC,CAAC;EACxD;;EAEA;AACF;AACA;AACA;EACEI,gBAAgBA,CAAA,EAAG;IACjB,MAAMC,KAAK,GAAG,IAAIC,IAAI,CAAC,CAAC;IACxB,MAAMC,SAAS,GAAG,IAAID,IAAI,CAAC,CAAC;IAC5BC,SAAS,CAACC,OAAO,CAACH,KAAK,CAACI,OAAO,CAAC,CAAC,GAAG,CAAC,CAAC;IAEtC,MAAMC,OAAO,GAAG,IAAI,CAACP,oBAAoB,CAACQ,gBAAgB,CAACJ,SAAS,EAAEF,KAAK,CAAC;IAC5E,MAAMO,aAAa,GAAG,IAAI,CAACT,oBAAoB,CAACU,UAAU,CAACC,wBAAwB,CACjFP,SAAS,EAAEF,KACb,CAAC,CAACU,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIX,IAAI,CAACW,CAAC,CAACC,SAAS,CAAC,GAAG,IAAIZ,IAAI,CAACU,CAAC,CAACE,SAAS,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,EAAE,CAAC,CAAC;IAE3E,OAAO;MACLT,OAAO;MACPE,aAAa;MACbQ,eAAe,EAAE,IAAI,CAACjB,oBAAoB,CAACkB,kBAAkB,CAAC;IAChE,CAAC;EACH;AACF;AAEA,eAAepB,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}