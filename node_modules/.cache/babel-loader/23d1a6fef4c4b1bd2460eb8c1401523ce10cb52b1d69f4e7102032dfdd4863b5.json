{"ast":null,"code":"import HealthDataController from '../controllers/HealthDataController';\n\n/**\n * JournalPresenter - Handles presenting data for the Journal view\n */\nclass JournalPresenter {\n  constructor() {\n    this.healthDataController = new HealthDataController();\n  }\n\n  /**\n   * Save a journal entry\n   * @param {Object} journalData - The journal entry data\n   * @returns {Object} - The saved entry\n   */\n  saveJournalEntry(journalData) {\n    // Format data for the model\n    const entry = {\n      mood: parseInt(journalData.mood, 10),\n      energy: parseInt(journalData.energy, 10),\n      symptoms: this.parseSymptoms(journalData.symptoms),\n      notes: journalData.notes,\n      tags: this.parseTags(journalData.tags)\n    };\n    return this.healthDataController.saveJournalEntry(entry);\n  }\n\n  /**\n   * Get recent journal entries\n   * @param {Number} count - Number of entries to retrieve\n   * @returns {Array} - Recent journal entries\n   */\n  getRecentEntries(count = 5) {\n    const allEntries = [...this.healthDataController.healthData.journalEntries];\n    return allEntries.sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp)).slice(0, count);\n  }\n\n  /**\n   * Parse symptoms string into array of symptom objects\n   * @param {String} symptomsStr - Comma-separated symptoms with optional severity\n   * @returns {Array} - Array of symptom objects\n   */\n  parseSymptoms(symptomsStr) {\n    if (!symptomsStr) return [];\n    return symptomsStr.split(',').map(symptom => {\n      const parts = symptom.trim().split(':');\n      return {\n        name: parts[0].trim(),\n        severity: parts.length > 1 ? parseInt(parts[1], 10) : 5\n      };\n    });\n  }\n\n  /**\n   * Parse tags string into array of tags\n   * @param {String} tagsStr - Comma or space separated tags\n   * @returns {Array} - Array of tags\n   */\n  parseTags(tagsStr) {\n    if (!tagsStr) return [];\n\n    // Replace commas with spaces and split by space\n    return tagsStr.replace(/,/g, ' ').split(' ').map(tag => tag.trim()).filter(tag => tag.length > 0);\n  }\n}\nexport default JournalPresenter;","map":{"version":3,"names":["HealthDataController","JournalPresenter","constructor","healthDataController","saveJournalEntry","journalData","entry","mood","parseInt","energy","symptoms","parseSymptoms","notes","tags","parseTags","getRecentEntries","count","allEntries","healthData","journalEntries","sort","a","b","Date","timestamp","slice","symptomsStr","split","map","symptom","parts","trim","name","severity","length","tagsStr","replace","tag","filter"],"sources":["/Users/kooshapari/temp-PRODVERCEL/hoohacks/tester/src/presenters/JournalPresenter.js"],"sourcesContent":["import HealthDataController from '../controllers/HealthDataController';\n\n/**\n * JournalPresenter - Handles presenting data for the Journal view\n */\nclass JournalPresenter {\n  constructor() {\n    this.healthDataController = new HealthDataController();\n  }\n\n  /**\n   * Save a journal entry\n   * @param {Object} journalData - The journal entry data\n   * @returns {Object} - The saved entry\n   */\n  saveJournalEntry(journalData) {\n    // Format data for the model\n    const entry = {\n      mood: parseInt(journalData.mood, 10),\n      energy: parseInt(journalData.energy, 10),\n      symptoms: this.parseSymptoms(journalData.symptoms),\n      notes: journalData.notes,\n      tags: this.parseTags(journalData.tags)\n    };\n    \n    return this.healthDataController.saveJournalEntry(entry);\n  }\n\n  /**\n   * Get recent journal entries\n   * @param {Number} count - Number of entries to retrieve\n   * @returns {Array} - Recent journal entries\n   */\n  getRecentEntries(count = 5) {\n    const allEntries = [...this.healthDataController.healthData.journalEntries];\n    return allEntries\n      .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))\n      .slice(0, count);\n  }\n\n  /**\n   * Parse symptoms string into array of symptom objects\n   * @param {String} symptomsStr - Comma-separated symptoms with optional severity\n   * @returns {Array} - Array of symptom objects\n   */\n  parseSymptoms(symptomsStr) {\n    if (!symptomsStr) return [];\n    \n    return symptomsStr.split(',').map(symptom => {\n      const parts = symptom.trim().split(':');\n      return {\n        name: parts[0].trim(),\n        severity: parts.length > 1 ? parseInt(parts[1], 10) : 5\n      };\n    });\n  }\n\n  /**\n   * Parse tags string into array of tags\n   * @param {String} tagsStr - Comma or space separated tags\n   * @returns {Array} - Array of tags\n   */\n  parseTags(tagsStr) {\n    if (!tagsStr) return [];\n    \n    // Replace commas with spaces and split by space\n    return tagsStr\n      .replace(/,/g, ' ')\n      .split(' ')\n      .map(tag => tag.trim())\n      .filter(tag => tag.length > 0);\n  }\n}\n\nexport default JournalPresenter;\n"],"mappings":"AAAA,OAAOA,oBAAoB,MAAM,qCAAqC;;AAEtE;AACA;AACA;AACA,MAAMC,gBAAgB,CAAC;EACrBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,oBAAoB,GAAG,IAAIH,oBAAoB,CAAC,CAAC;EACxD;;EAEA;AACF;AACA;AACA;AACA;EACEI,gBAAgBA,CAACC,WAAW,EAAE;IAC5B;IACA,MAAMC,KAAK,GAAG;MACZC,IAAI,EAAEC,QAAQ,CAACH,WAAW,CAACE,IAAI,EAAE,EAAE,CAAC;MACpCE,MAAM,EAAED,QAAQ,CAACH,WAAW,CAACI,MAAM,EAAE,EAAE,CAAC;MACxCC,QAAQ,EAAE,IAAI,CAACC,aAAa,CAACN,WAAW,CAACK,QAAQ,CAAC;MAClDE,KAAK,EAAEP,WAAW,CAACO,KAAK;MACxBC,IAAI,EAAE,IAAI,CAACC,SAAS,CAACT,WAAW,CAACQ,IAAI;IACvC,CAAC;IAED,OAAO,IAAI,CAACV,oBAAoB,CAACC,gBAAgB,CAACE,KAAK,CAAC;EAC1D;;EAEA;AACF;AACA;AACA;AACA;EACES,gBAAgBA,CAACC,KAAK,GAAG,CAAC,EAAE;IAC1B,MAAMC,UAAU,GAAG,CAAC,GAAG,IAAI,CAACd,oBAAoB,CAACe,UAAU,CAACC,cAAc,CAAC;IAC3E,OAAOF,UAAU,CACdG,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAK,IAAIC,IAAI,CAACD,CAAC,CAACE,SAAS,CAAC,GAAG,IAAID,IAAI,CAACF,CAAC,CAACG,SAAS,CAAC,CAAC,CAC7DC,KAAK,CAAC,CAAC,EAAET,KAAK,CAAC;EACpB;;EAEA;AACF;AACA;AACA;AACA;EACEL,aAAaA,CAACe,WAAW,EAAE;IACzB,IAAI,CAACA,WAAW,EAAE,OAAO,EAAE;IAE3B,OAAOA,WAAW,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,OAAO,IAAI;MAC3C,MAAMC,KAAK,GAAGD,OAAO,CAACE,IAAI,CAAC,CAAC,CAACJ,KAAK,CAAC,GAAG,CAAC;MACvC,OAAO;QACLK,IAAI,EAAEF,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC;QACrBE,QAAQ,EAAEH,KAAK,CAACI,MAAM,GAAG,CAAC,GAAG1B,QAAQ,CAACsB,KAAK,CAAC,CAAC,CAAC,EAAE,EAAE,CAAC,GAAG;MACxD,CAAC;IACH,CAAC,CAAC;EACJ;;EAEA;AACF;AACA;AACA;AACA;EACEhB,SAASA,CAACqB,OAAO,EAAE;IACjB,IAAI,CAACA,OAAO,EAAE,OAAO,EAAE;;IAEvB;IACA,OAAOA,OAAO,CACXC,OAAO,CAAC,IAAI,EAAE,GAAG,CAAC,CAClBT,KAAK,CAAC,GAAG,CAAC,CACVC,GAAG,CAACS,GAAG,IAAIA,GAAG,CAACN,IAAI,CAAC,CAAC,CAAC,CACtBO,MAAM,CAACD,GAAG,IAAIA,GAAG,CAACH,MAAM,GAAG,CAAC,CAAC;EAClC;AACF;AAEA,eAAejC,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}