{"ast":null,"code":"import HealthDataController from '../controllers/HealthDataController';\n\n/**\n * PatternAnalysisPresenter - Handles presenting data for the Pattern Analysis view\n */\nclass PatternAnalysisPresenter {\n  constructor() {\n    this.healthDataController = new HealthDataController();\n  }\n\n  /**\n   * Get pattern analysis data for a symptom\n   * @param {String} symptom - The symptom to analyze\n   * @returns {Object} - Pattern analysis data\n   */\n  getPatternAnalysisData(symptom = 'Headache') {\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(endDate.getDate() - 30);\n    const analysis = this.healthDataController.getPatternAnalysis(symptom, startDate, endDate);\n\n    // Format the data for presentation\n    return {\n      symptom: analysis.symptom,\n      period: {\n        start: new Date(analysis.period.start).toLocaleDateString(),\n        end: new Date(analysis.period.end).toLocaleDateString()\n      },\n      occurrences: {\n        withSymptom: analysis.symptomDaysCount,\n        withoutSymptom: analysis.nonSymptomDaysCount,\n        percentage: Math.round(analysis.symptomDaysCount / (analysis.symptomDaysCount + analysis.nonSymptomDaysCount) * 100)\n      },\n      comparisons: [{\n        factor: 'Sleep Duration',\n        withSymptom: `${analysis.comparisons.sleep.symptomDaysAvg} hours`,\n        withoutSymptom: `${analysis.comparisons.sleep.nonSymptomDaysAvg} hours`,\n        difference: `${Math.abs(analysis.comparisons.sleep.difference).toFixed(1)} hours ${analysis.comparisons.sleep.difference > 0 ? 'less' : 'more'}`\n      }, {\n        factor: 'Physical Activity',\n        withSymptom: `${analysis.comparisons.activity.symptomDaysAvg} steps`,\n        withoutSymptom: `${analysis.comparisons.activity.nonSymptomDaysAvg} steps`,\n        difference: `${Math.abs(analysis.comparisons.activity.difference).toFixed(0)} steps ${analysis.comparisons.activity.difference > 0 ? 'less' : 'more'}`\n      }],\n      tags: this.formatTagsComparison(analysis.tags.symptomDays, analysis.tags.nonSymptomDays, analysis.symptomDaysCount, analysis.nonSymptomDaysCount)\n    };\n  }\n\n  /**\n   * Format tags comparison data\n   * @param {Object} symptomTags - Tags from symptom days\n   * @param {Object} nonSymptomTags - Tags from non-symptom days\n   * @param {Number} symptomCount - Number of symptom days\n   * @param {Number} nonSymptomCount - Number of non-symptom days\n   * @returns {Array} - Formatted tag comparison data\n   */\n  formatTagsComparison(symptomTags, nonSymptomTags, symptomCount, nonSymptomCount) {\n    const allTags = new Set([...Object.keys(symptomTags), ...Object.keys(nonSymptomTags)]);\n    return Array.from(allTags).map(tag => {\n      const symptomFreq = symptomTags[tag] || 0;\n      const nonSymptomFreq = nonSymptomTags[tag] || 0;\n      const symptomPercentage = symptomCount > 0 ? Math.round(symptomFreq / symptomCount * 100) : 0;\n      const nonSymptomPercentage = nonSymptomCount > 0 ? Math.round(nonSymptomFreq / nonSymptomCount * 100) : 0;\n      return {\n        tag,\n        symptomPercentage,\n        nonSymptomPercentage,\n        difference: symptomPercentage - nonSymptomPercentage\n      };\n    }).sort((a, b) => Math.abs(b.difference) - Math.abs(a.difference));\n  }\n\n  /**\n   * Get available symptoms for analysis\n   * @returns {Array} - List of available symptoms\n   */\n  getAvailableSymptoms() {\n    const allEntries = this.healthDataController.healthData.journalEntries;\n    const symptoms = new Set();\n    allEntries.forEach(entry => {\n      entry.symptoms.forEach(symptom => {\n        symptoms.add(symptom.name);\n      });\n    });\n    return Array.from(symptoms);\n  }\n}\nexport default PatternAnalysisPresenter;","map":{"version":3,"names":["HealthDataController","PatternAnalysisPresenter","constructor","healthDataController","getPatternAnalysisData","symptom","endDate","Date","startDate","setDate","getDate","analysis","getPatternAnalysis","period","start","toLocaleDateString","end","occurrences","withSymptom","symptomDaysCount","withoutSymptom","nonSymptomDaysCount","percentage","Math","round","comparisons","factor","sleep","symptomDaysAvg","nonSymptomDaysAvg","difference","abs","toFixed","activity","tags","formatTagsComparison","symptomDays","nonSymptomDays","symptomTags","nonSymptomTags","symptomCount","nonSymptomCount","allTags","Set","Object","keys","Array","from","map","tag","symptomFreq","nonSymptomFreq","symptomPercentage","nonSymptomPercentage","sort","a","b","getAvailableSymptoms","allEntries","healthData","journalEntries","symptoms","forEach","entry","add","name"],"sources":["/Users/kooshapari/temp-PRODVERCEL/hoohacks/tester/src/presenters/PatternAnalysisPresenter.js"],"sourcesContent":["import HealthDataController from '../controllers/HealthDataController';\n\n/**\n * PatternAnalysisPresenter - Handles presenting data for the Pattern Analysis view\n */\nclass PatternAnalysisPresenter {\n  constructor() {\n    this.healthDataController = new HealthDataController();\n  }\n\n  /**\n   * Get pattern analysis data for a symptom\n   * @param {String} symptom - The symptom to analyze\n   * @returns {Object} - Pattern analysis data\n   */\n  getPatternAnalysisData(symptom = 'Headache') {\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(endDate.getDate() - 30);\n    \n    const analysis = this.healthDataController.getPatternAnalysis(\n      symptom,\n      startDate,\n      endDate\n    );\n    \n    // Format the data for presentation\n    return {\n      symptom: analysis.symptom,\n      period: {\n        start: new Date(analysis.period.start).toLocaleDateString(),\n        end: new Date(analysis.period.end).toLocaleDateString()\n      },\n      occurrences: {\n        withSymptom: analysis.symptomDaysCount,\n        withoutSymptom: analysis.nonSymptomDaysCount,\n        percentage: Math.round((analysis.symptomDaysCount / \n          (analysis.symptomDaysCount + analysis.nonSymptomDaysCount)) * 100)\n      },\n      comparisons: [\n        {\n          factor: 'Sleep Duration',\n          withSymptom: `${analysis.comparisons.sleep.symptomDaysAvg} hours`,\n          withoutSymptom: `${analysis.comparisons.sleep.nonSymptomDaysAvg} hours`,\n          difference: `${Math.abs(analysis.comparisons.sleep.difference).toFixed(1)} hours ${\n            analysis.comparisons.sleep.difference > 0 ? 'less' : 'more'\n          }`\n        },\n        {\n          factor: 'Physical Activity',\n          withSymptom: `${analysis.comparisons.activity.symptomDaysAvg} steps`,\n          withoutSymptom: `${analysis.comparisons.activity.nonSymptomDaysAvg} steps`,\n          difference: `${Math.abs(analysis.comparisons.activity.difference).toFixed(0)} steps ${\n            analysis.comparisons.activity.difference > 0 ? 'less' : 'more'\n          }`\n        }\n      ],\n      tags: this.formatTagsComparison(\n        analysis.tags.symptomDays, \n        analysis.tags.nonSymptomDays,\n        analysis.symptomDaysCount,\n        analysis.nonSymptomDaysCount\n      )\n    };\n  }\n\n  /**\n   * Format tags comparison data\n   * @param {Object} symptomTags - Tags from symptom days\n   * @param {Object} nonSymptomTags - Tags from non-symptom days\n   * @param {Number} symptomCount - Number of symptom days\n   * @param {Number} nonSymptomCount - Number of non-symptom days\n   * @returns {Array} - Formatted tag comparison data\n   */\n  formatTagsComparison(symptomTags, nonSymptomTags, symptomCount, nonSymptomCount) {\n    const allTags = new Set([\n      ...Object.keys(symptomTags),\n      ...Object.keys(nonSymptomTags)\n    ]);\n    \n    return Array.from(allTags).map(tag => {\n      const symptomFreq = symptomTags[tag] || 0;\n      const nonSymptomFreq = nonSymptomTags[tag] || 0;\n      \n      const symptomPercentage = symptomCount > 0 \n        ? Math.round((symptomFreq / symptomCount) * 100) \n        : 0;\n        \n      const nonSymptomPercentage = nonSymptomCount > 0 \n        ? Math.round((nonSymptomFreq / nonSymptomCount) * 100) \n        : 0;\n      \n      return {\n        tag,\n        symptomPercentage,\n        nonSymptomPercentage,\n        difference: symptomPercentage - nonSymptomPercentage\n      };\n    }).sort((a, b) => Math.abs(b.difference) - Math.abs(a.difference));\n  }\n\n  /**\n   * Get available symptoms for analysis\n   * @returns {Array} - List of available symptoms\n   */\n  getAvailableSymptoms() {\n    const allEntries = this.healthDataController.healthData.journalEntries;\n    const symptoms = new Set();\n    \n    allEntries.forEach(entry => {\n      entry.symptoms.forEach(symptom => {\n        symptoms.add(symptom.name);\n      });\n    });\n    \n    return Array.from(symptoms);\n  }\n}\n\nexport default PatternAnalysisPresenter;\n"],"mappings":"AAAA,OAAOA,oBAAoB,MAAM,qCAAqC;;AAEtE;AACA;AACA;AACA,MAAMC,wBAAwB,CAAC;EAC7BC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,oBAAoB,GAAG,IAAIH,oBAAoB,CAAC,CAAC;EACxD;;EAEA;AACF;AACA;AACA;AACA;EACEI,sBAAsBA,CAACC,OAAO,GAAG,UAAU,EAAE;IAC3C,MAAMC,OAAO,GAAG,IAAIC,IAAI,CAAC,CAAC;IAC1B,MAAMC,SAAS,GAAG,IAAID,IAAI,CAAC,CAAC;IAC5BC,SAAS,CAACC,OAAO,CAACH,OAAO,CAACI,OAAO,CAAC,CAAC,GAAG,EAAE,CAAC;IAEzC,MAAMC,QAAQ,GAAG,IAAI,CAACR,oBAAoB,CAACS,kBAAkB,CAC3DP,OAAO,EACPG,SAAS,EACTF,OACF,CAAC;;IAED;IACA,OAAO;MACLD,OAAO,EAAEM,QAAQ,CAACN,OAAO;MACzBQ,MAAM,EAAE;QACNC,KAAK,EAAE,IAAIP,IAAI,CAACI,QAAQ,CAACE,MAAM,CAACC,KAAK,CAAC,CAACC,kBAAkB,CAAC,CAAC;QAC3DC,GAAG,EAAE,IAAIT,IAAI,CAACI,QAAQ,CAACE,MAAM,CAACG,GAAG,CAAC,CAACD,kBAAkB,CAAC;MACxD,CAAC;MACDE,WAAW,EAAE;QACXC,WAAW,EAAEP,QAAQ,CAACQ,gBAAgB;QACtCC,cAAc,EAAET,QAAQ,CAACU,mBAAmB;QAC5CC,UAAU,EAAEC,IAAI,CAACC,KAAK,CAAEb,QAAQ,CAACQ,gBAAgB,IAC9CR,QAAQ,CAACQ,gBAAgB,GAAGR,QAAQ,CAACU,mBAAmB,CAAC,GAAI,GAAG;MACrE,CAAC;MACDI,WAAW,EAAE,CACX;QACEC,MAAM,EAAE,gBAAgB;QACxBR,WAAW,EAAE,GAAGP,QAAQ,CAACc,WAAW,CAACE,KAAK,CAACC,cAAc,QAAQ;QACjER,cAAc,EAAE,GAAGT,QAAQ,CAACc,WAAW,CAACE,KAAK,CAACE,iBAAiB,QAAQ;QACvEC,UAAU,EAAE,GAAGP,IAAI,CAACQ,GAAG,CAACpB,QAAQ,CAACc,WAAW,CAACE,KAAK,CAACG,UAAU,CAAC,CAACE,OAAO,CAAC,CAAC,CAAC,UACvErB,QAAQ,CAACc,WAAW,CAACE,KAAK,CAACG,UAAU,GAAG,CAAC,GAAG,MAAM,GAAG,MAAM;MAE/D,CAAC,EACD;QACEJ,MAAM,EAAE,mBAAmB;QAC3BR,WAAW,EAAE,GAAGP,QAAQ,CAACc,WAAW,CAACQ,QAAQ,CAACL,cAAc,QAAQ;QACpER,cAAc,EAAE,GAAGT,QAAQ,CAACc,WAAW,CAACQ,QAAQ,CAACJ,iBAAiB,QAAQ;QAC1EC,UAAU,EAAE,GAAGP,IAAI,CAACQ,GAAG,CAACpB,QAAQ,CAACc,WAAW,CAACQ,QAAQ,CAACH,UAAU,CAAC,CAACE,OAAO,CAAC,CAAC,CAAC,UAC1ErB,QAAQ,CAACc,WAAW,CAACQ,QAAQ,CAACH,UAAU,GAAG,CAAC,GAAG,MAAM,GAAG,MAAM;MAElE,CAAC,CACF;MACDI,IAAI,EAAE,IAAI,CAACC,oBAAoB,CAC7BxB,QAAQ,CAACuB,IAAI,CAACE,WAAW,EACzBzB,QAAQ,CAACuB,IAAI,CAACG,cAAc,EAC5B1B,QAAQ,CAACQ,gBAAgB,EACzBR,QAAQ,CAACU,mBACX;IACF,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;AACA;AACA;AACA;EACEc,oBAAoBA,CAACG,WAAW,EAAEC,cAAc,EAAEC,YAAY,EAAEC,eAAe,EAAE;IAC/E,MAAMC,OAAO,GAAG,IAAIC,GAAG,CAAC,CACtB,GAAGC,MAAM,CAACC,IAAI,CAACP,WAAW,CAAC,EAC3B,GAAGM,MAAM,CAACC,IAAI,CAACN,cAAc,CAAC,CAC/B,CAAC;IAEF,OAAOO,KAAK,CAACC,IAAI,CAACL,OAAO,CAAC,CAACM,GAAG,CAACC,GAAG,IAAI;MACpC,MAAMC,WAAW,GAAGZ,WAAW,CAACW,GAAG,CAAC,IAAI,CAAC;MACzC,MAAME,cAAc,GAAGZ,cAAc,CAACU,GAAG,CAAC,IAAI,CAAC;MAE/C,MAAMG,iBAAiB,GAAGZ,YAAY,GAAG,CAAC,GACtCjB,IAAI,CAACC,KAAK,CAAE0B,WAAW,GAAGV,YAAY,GAAI,GAAG,CAAC,GAC9C,CAAC;MAEL,MAAMa,oBAAoB,GAAGZ,eAAe,GAAG,CAAC,GAC5ClB,IAAI,CAACC,KAAK,CAAE2B,cAAc,GAAGV,eAAe,GAAI,GAAG,CAAC,GACpD,CAAC;MAEL,OAAO;QACLQ,GAAG;QACHG,iBAAiB;QACjBC,oBAAoB;QACpBvB,UAAU,EAAEsB,iBAAiB,GAAGC;MAClC,CAAC;IACH,CAAC,CAAC,CAACC,IAAI,CAAC,CAACC,CAAC,EAAEC,CAAC,KAAKjC,IAAI,CAACQ,GAAG,CAACyB,CAAC,CAAC1B,UAAU,CAAC,GAAGP,IAAI,CAACQ,GAAG,CAACwB,CAAC,CAACzB,UAAU,CAAC,CAAC;EACpE;;EAEA;AACF;AACA;AACA;EACE2B,oBAAoBA,CAAA,EAAG;IACrB,MAAMC,UAAU,GAAG,IAAI,CAACvD,oBAAoB,CAACwD,UAAU,CAACC,cAAc;IACtE,MAAMC,QAAQ,GAAG,IAAIlB,GAAG,CAAC,CAAC;IAE1Be,UAAU,CAACI,OAAO,CAACC,KAAK,IAAI;MAC1BA,KAAK,CAACF,QAAQ,CAACC,OAAO,CAACzD,OAAO,IAAI;QAChCwD,QAAQ,CAACG,GAAG,CAAC3D,OAAO,CAAC4D,IAAI,CAAC;MAC5B,CAAC,CAAC;IACJ,CAAC,CAAC;IAEF,OAAOnB,KAAK,CAACC,IAAI,CAACc,QAAQ,CAAC;EAC7B;AACF;AAEA,eAAe5D,wBAAwB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}