{"ast":null,"code":"import HealthDataController from'../controllers/HealthDataController';/**\n * JournalPresenter - Handles presenting data for the Journal view\n */class JournalPresenter{constructor(){this.healthDataController=new HealthDataController();}/**\n   * Save a journal entry\n   * @param {Object} journalData - The journal entry data\n   * @returns {Object} - The saved entry\n   */saveJournalEntry(journalData){// Format data for the model\nconst entry={mood:parseInt(journalData.mood,10),energy:parseInt(journalData.energy,10),symptoms:this.parseSymptoms(journalData.symptoms),notes:journalData.notes,tags:this.parseTags(journalData.tags)};return this.healthDataController.saveJournalEntry(entry);}/**\n   * Get recent journal entries\n   * @param {Number} count - Number of entries to retrieve\n   * @returns {Array} - Recent journal entries\n   */getRecentEntries(){let count=arguments.length>0&&arguments[0]!==undefined?arguments[0]:5;const allEntries=[...this.healthDataController.healthData.journalEntries];return allEntries.sort((a,b)=>new Date(b.timestamp)-new Date(a.timestamp)).slice(0,count);}/**\n   * Parse symptoms string into array of symptom objects\n   * @param {String} symptomsStr - Comma-separated symptoms with optional severity\n   * @returns {Array} - Array of symptom objects\n   */parseSymptoms(symptomsStr){if(!symptomsStr)return[];return symptomsStr.split(',').map(symptom=>{const parts=symptom.trim().split(':');return{name:parts[0].trim(),severity:parts.length>1?parseInt(parts[1],10):5};});}/**\n   * Parse tags string into array of tags\n   * @param {String} tagsStr - Comma or space separated tags\n   * @returns {Array} - Array of tags\n   */parseTags(tagsStr){if(!tagsStr)return[];// Replace commas with spaces and split by space\nreturn tagsStr.replace(/,/g,' ').split(' ').map(tag=>tag.trim()).filter(tag=>tag.length>0);}}export default JournalPresenter;","map":{"version":3,"names":["HealthDataController","JournalPresenter","constructor","healthDataController","saveJournalEntry","journalData","entry","mood","parseInt","energy","symptoms","parseSymptoms","notes","tags","parseTags","getRecentEntries","count","arguments","length","undefined","allEntries","healthData","journalEntries","sort","a","b","Date","timestamp","slice","symptomsStr","split","map","symptom","parts","trim","name","severity","tagsStr","replace","tag","filter"],"sources":["/Users/kooshapari/temp-PRODVERCEL/hoohacks/tester/src/presenters/JournalPresenter.js"],"sourcesContent":["import HealthDataController from '../controllers/HealthDataController';\n\n/**\n * JournalPresenter - Handles presenting data for the Journal view\n */\nclass JournalPresenter {\n  constructor() {\n    this.healthDataController = new HealthDataController();\n  }\n\n  /**\n   * Save a journal entry\n   * @param {Object} journalData - The journal entry data\n   * @returns {Object} - The saved entry\n   */\n  saveJournalEntry(journalData) {\n    // Format data for the model\n    const entry = {\n      mood: parseInt(journalData.mood, 10),\n      energy: parseInt(journalData.energy, 10),\n      symptoms: this.parseSymptoms(journalData.symptoms),\n      notes: journalData.notes,\n      tags: this.parseTags(journalData.tags)\n    };\n    \n    return this.healthDataController.saveJournalEntry(entry);\n  }\n\n  /**\n   * Get recent journal entries\n   * @param {Number} count - Number of entries to retrieve\n   * @returns {Array} - Recent journal entries\n   */\n  getRecentEntries(count = 5) {\n    const allEntries = [...this.healthDataController.healthData.journalEntries];\n    return allEntries\n      .sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp))\n      .slice(0, count);\n  }\n\n  /**\n   * Parse symptoms string into array of symptom objects\n   * @param {String} symptomsStr - Comma-separated symptoms with optional severity\n   * @returns {Array} - Array of symptom objects\n   */\n  parseSymptoms(symptomsStr) {\n    if (!symptomsStr) return [];\n    \n    return symptomsStr.split(',').map(symptom => {\n      const parts = symptom.trim().split(':');\n      return {\n        name: parts[0].trim(),\n        severity: parts.length > 1 ? parseInt(parts[1], 10) : 5\n      };\n    });\n  }\n\n  /**\n   * Parse tags string into array of tags\n   * @param {String} tagsStr - Comma or space separated tags\n   * @returns {Array} - Array of tags\n   */\n  parseTags(tagsStr) {\n    if (!tagsStr) return [];\n    \n    // Replace commas with spaces and split by space\n    return tagsStr\n      .replace(/,/g, ' ')\n      .split(' ')\n      .map(tag => tag.trim())\n      .filter(tag => tag.length > 0);\n  }\n}\n\nexport default JournalPresenter;\n"],"mappings":"AAAA,MAAO,CAAAA,oBAAoB,KAAM,qCAAqC,CAEtE;AACA;AACA,GACA,KAAM,CAAAC,gBAAiB,CACrBC,WAAWA,CAAA,CAAG,CACZ,IAAI,CAACC,oBAAoB,CAAG,GAAI,CAAAH,oBAAoB,CAAC,CAAC,CACxD,CAEA;AACF;AACA;AACA;AACA,KACEI,gBAAgBA,CAACC,WAAW,CAAE,CAC5B;AACA,KAAM,CAAAC,KAAK,CAAG,CACZC,IAAI,CAAEC,QAAQ,CAACH,WAAW,CAACE,IAAI,CAAE,EAAE,CAAC,CACpCE,MAAM,CAAED,QAAQ,CAACH,WAAW,CAACI,MAAM,CAAE,EAAE,CAAC,CACxCC,QAAQ,CAAE,IAAI,CAACC,aAAa,CAACN,WAAW,CAACK,QAAQ,CAAC,CAClDE,KAAK,CAAEP,WAAW,CAACO,KAAK,CACxBC,IAAI,CAAE,IAAI,CAACC,SAAS,CAACT,WAAW,CAACQ,IAAI,CACvC,CAAC,CAED,MAAO,KAAI,CAACV,oBAAoB,CAACC,gBAAgB,CAACE,KAAK,CAAC,CAC1D,CAEA;AACF;AACA;AACA;AACA,KACES,gBAAgBA,CAAA,CAAY,IAAX,CAAAC,KAAK,CAAAC,SAAA,CAAAC,MAAA,IAAAD,SAAA,MAAAE,SAAA,CAAAF,SAAA,IAAG,CAAC,CACxB,KAAM,CAAAG,UAAU,CAAG,CAAC,GAAG,IAAI,CAACjB,oBAAoB,CAACkB,UAAU,CAACC,cAAc,CAAC,CAC3E,MAAO,CAAAF,UAAU,CACdG,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAK,GAAI,CAAAC,IAAI,CAACD,CAAC,CAACE,SAAS,CAAC,CAAG,GAAI,CAAAD,IAAI,CAACF,CAAC,CAACG,SAAS,CAAC,CAAC,CAC7DC,KAAK,CAAC,CAAC,CAAEZ,KAAK,CAAC,CACpB,CAEA;AACF;AACA;AACA;AACA,KACEL,aAAaA,CAACkB,WAAW,CAAE,CACzB,GAAI,CAACA,WAAW,CAAE,MAAO,EAAE,CAE3B,MAAO,CAAAA,WAAW,CAACC,KAAK,CAAC,GAAG,CAAC,CAACC,GAAG,CAACC,OAAO,EAAI,CAC3C,KAAM,CAAAC,KAAK,CAAGD,OAAO,CAACE,IAAI,CAAC,CAAC,CAACJ,KAAK,CAAC,GAAG,CAAC,CACvC,MAAO,CACLK,IAAI,CAAEF,KAAK,CAAC,CAAC,CAAC,CAACC,IAAI,CAAC,CAAC,CACrBE,QAAQ,CAAEH,KAAK,CAACf,MAAM,CAAG,CAAC,CAAGV,QAAQ,CAACyB,KAAK,CAAC,CAAC,CAAC,CAAE,EAAE,CAAC,CAAG,CACxD,CAAC,CACH,CAAC,CAAC,CACJ,CAEA;AACF;AACA;AACA;AACA,KACEnB,SAASA,CAACuB,OAAO,CAAE,CACjB,GAAI,CAACA,OAAO,CAAE,MAAO,EAAE,CAEvB;AACA,MAAO,CAAAA,OAAO,CACXC,OAAO,CAAC,IAAI,CAAE,GAAG,CAAC,CAClBR,KAAK,CAAC,GAAG,CAAC,CACVC,GAAG,CAACQ,GAAG,EAAIA,GAAG,CAACL,IAAI,CAAC,CAAC,CAAC,CACtBM,MAAM,CAACD,GAAG,EAAIA,GAAG,CAACrB,MAAM,CAAG,CAAC,CAAC,CAClC,CACF,CAEA,cAAe,CAAAjB,gBAAgB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}