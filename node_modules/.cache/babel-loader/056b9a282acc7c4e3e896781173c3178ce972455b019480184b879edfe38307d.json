{"ast":null,"code":"import HealthDataController from'../controllers/HealthDataController';/**\n * PatternAnalysisPresenter - Handles presenting data for the Pattern Analysis view\n */class PatternAnalysisPresenter{constructor(){this.healthDataController=new HealthDataController();}/**\n   * Get pattern analysis data for a symptom\n   * @param {String} symptom - The symptom to analyze\n   * @returns {Object} - Pattern analysis data\n   */getPatternAnalysisData(){let symptom=arguments.length>0&&arguments[0]!==undefined?arguments[0]:'Headache';const endDate=new Date();const startDate=new Date();startDate.setDate(endDate.getDate()-30);const analysis=this.healthDataController.getPatternAnalysis(symptom,startDate,endDate);// Format the data for presentation\nreturn{symptom:analysis.symptom,period:{start:new Date(analysis.period.start).toLocaleDateString(),end:new Date(analysis.period.end).toLocaleDateString()},occurrences:{withSymptom:analysis.symptomDaysCount,withoutSymptom:analysis.nonSymptomDaysCount,percentage:Math.round(analysis.symptomDaysCount/(analysis.symptomDaysCount+analysis.nonSymptomDaysCount)*100)},comparisons:[{factor:'Sleep Duration',withSymptom:`${analysis.comparisons.sleep.symptomDaysAvg} hours`,withoutSymptom:`${analysis.comparisons.sleep.nonSymptomDaysAvg} hours`,difference:`${Math.abs(analysis.comparisons.sleep.difference).toFixed(1)} hours ${analysis.comparisons.sleep.difference>0?'less':'more'}`},{factor:'Physical Activity',withSymptom:`${analysis.comparisons.activity.symptomDaysAvg} steps`,withoutSymptom:`${analysis.comparisons.activity.nonSymptomDaysAvg} steps`,difference:`${Math.abs(analysis.comparisons.activity.difference).toFixed(0)} steps ${analysis.comparisons.activity.difference>0?'less':'more'}`}],tags:this.formatTagsComparison(analysis.tags.symptomDays,analysis.tags.nonSymptomDays,analysis.symptomDaysCount,analysis.nonSymptomDaysCount)};}/**\n   * Format tags comparison data\n   * @param {Object} symptomTags - Tags from symptom days\n   * @param {Object} nonSymptomTags - Tags from non-symptom days\n   * @param {Number} symptomCount - Number of symptom days\n   * @param {Number} nonSymptomCount - Number of non-symptom days\n   * @returns {Array} - Formatted tag comparison data\n   */formatTagsComparison(symptomTags,nonSymptomTags,symptomCount,nonSymptomCount){const allTags=new Set([...Object.keys(symptomTags),...Object.keys(nonSymptomTags)]);return Array.from(allTags).map(tag=>{const symptomFreq=symptomTags[tag]||0;const nonSymptomFreq=nonSymptomTags[tag]||0;const symptomPercentage=symptomCount>0?Math.round(symptomFreq/symptomCount*100):0;const nonSymptomPercentage=nonSymptomCount>0?Math.round(nonSymptomFreq/nonSymptomCount*100):0;return{tag,symptomPercentage,nonSymptomPercentage,difference:symptomPercentage-nonSymptomPercentage};}).sort((a,b)=>Math.abs(b.difference)-Math.abs(a.difference));}/**\n   * Get available symptoms for analysis\n   * @returns {Array} - List of available symptoms\n   */getAvailableSymptoms(){const allEntries=this.healthDataController.healthData.journalEntries;const symptoms=new Set();allEntries.forEach(entry=>{entry.symptoms.forEach(symptom=>{symptoms.add(symptom.name);});});return Array.from(symptoms);}}export default PatternAnalysisPresenter;","map":{"version":3,"names":["HealthDataController","PatternAnalysisPresenter","constructor","healthDataController","getPatternAnalysisData","symptom","arguments","length","undefined","endDate","Date","startDate","setDate","getDate","analysis","getPatternAnalysis","period","start","toLocaleDateString","end","occurrences","withSymptom","symptomDaysCount","withoutSymptom","nonSymptomDaysCount","percentage","Math","round","comparisons","factor","sleep","symptomDaysAvg","nonSymptomDaysAvg","difference","abs","toFixed","activity","tags","formatTagsComparison","symptomDays","nonSymptomDays","symptomTags","nonSymptomTags","symptomCount","nonSymptomCount","allTags","Set","Object","keys","Array","from","map","tag","symptomFreq","nonSymptomFreq","symptomPercentage","nonSymptomPercentage","sort","a","b","getAvailableSymptoms","allEntries","healthData","journalEntries","symptoms","forEach","entry","add","name"],"sources":["/Users/kooshapari/temp-PRODVERCEL/hoohacks/tester/src/presenters/PatternAnalysisPresenter.js"],"sourcesContent":["import HealthDataController from '../controllers/HealthDataController';\n\n/**\n * PatternAnalysisPresenter - Handles presenting data for the Pattern Analysis view\n */\nclass PatternAnalysisPresenter {\n  constructor() {\n    this.healthDataController = new HealthDataController();\n  }\n\n  /**\n   * Get pattern analysis data for a symptom\n   * @param {String} symptom - The symptom to analyze\n   * @returns {Object} - Pattern analysis data\n   */\n  getPatternAnalysisData(symptom = 'Headache') {\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(endDate.getDate() - 30);\n    \n    const analysis = this.healthDataController.getPatternAnalysis(\n      symptom,\n      startDate,\n      endDate\n    );\n    \n    // Format the data for presentation\n    return {\n      symptom: analysis.symptom,\n      period: {\n        start: new Date(analysis.period.start).toLocaleDateString(),\n        end: new Date(analysis.period.end).toLocaleDateString()\n      },\n      occurrences: {\n        withSymptom: analysis.symptomDaysCount,\n        withoutSymptom: analysis.nonSymptomDaysCount,\n        percentage: Math.round((analysis.symptomDaysCount / \n          (analysis.symptomDaysCount + analysis.nonSymptomDaysCount)) * 100)\n      },\n      comparisons: [\n        {\n          factor: 'Sleep Duration',\n          withSymptom: `${analysis.comparisons.sleep.symptomDaysAvg} hours`,\n          withoutSymptom: `${analysis.comparisons.sleep.nonSymptomDaysAvg} hours`,\n          difference: `${Math.abs(analysis.comparisons.sleep.difference).toFixed(1)} hours ${\n            analysis.comparisons.sleep.difference > 0 ? 'less' : 'more'\n          }`\n        },\n        {\n          factor: 'Physical Activity',\n          withSymptom: `${analysis.comparisons.activity.symptomDaysAvg} steps`,\n          withoutSymptom: `${analysis.comparisons.activity.nonSymptomDaysAvg} steps`,\n          difference: `${Math.abs(analysis.comparisons.activity.difference).toFixed(0)} steps ${\n            analysis.comparisons.activity.difference > 0 ? 'less' : 'more'\n          }`\n        }\n      ],\n      tags: this.formatTagsComparison(\n        analysis.tags.symptomDays, \n        analysis.tags.nonSymptomDays,\n        analysis.symptomDaysCount,\n        analysis.nonSymptomDaysCount\n      )\n    };\n  }\n\n  /**\n   * Format tags comparison data\n   * @param {Object} symptomTags - Tags from symptom days\n   * @param {Object} nonSymptomTags - Tags from non-symptom days\n   * @param {Number} symptomCount - Number of symptom days\n   * @param {Number} nonSymptomCount - Number of non-symptom days\n   * @returns {Array} - Formatted tag comparison data\n   */\n  formatTagsComparison(symptomTags, nonSymptomTags, symptomCount, nonSymptomCount) {\n    const allTags = new Set([\n      ...Object.keys(symptomTags),\n      ...Object.keys(nonSymptomTags)\n    ]);\n    \n    return Array.from(allTags).map(tag => {\n      const symptomFreq = symptomTags[tag] || 0;\n      const nonSymptomFreq = nonSymptomTags[tag] || 0;\n      \n      const symptomPercentage = symptomCount > 0 \n        ? Math.round((symptomFreq / symptomCount) * 100) \n        : 0;\n        \n      const nonSymptomPercentage = nonSymptomCount > 0 \n        ? Math.round((nonSymptomFreq / nonSymptomCount) * 100) \n        : 0;\n      \n      return {\n        tag,\n        symptomPercentage,\n        nonSymptomPercentage,\n        difference: symptomPercentage - nonSymptomPercentage\n      };\n    }).sort((a, b) => Math.abs(b.difference) - Math.abs(a.difference));\n  }\n\n  /**\n   * Get available symptoms for analysis\n   * @returns {Array} - List of available symptoms\n   */\n  getAvailableSymptoms() {\n    const allEntries = this.healthDataController.healthData.journalEntries;\n    const symptoms = new Set();\n    \n    allEntries.forEach(entry => {\n      entry.symptoms.forEach(symptom => {\n        symptoms.add(symptom.name);\n      });\n    });\n    \n    return Array.from(symptoms);\n  }\n}\n\nexport default PatternAnalysisPresenter;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}