{"ast":null,"code":"import HealthDataController from '../controllers/HealthDataController';\n\n/**\r\n * DoctorVisitPresenter - Handles presenting data for the Doctor Visit view\r\n */\nclass DoctorVisitPresenter {\n  constructor() {\n    this.healthDataController = new HealthDataController();\n  }\n\n  /**\r\n   * Get doctor visit summary data\r\n   * @returns {Object} - Doctor visit summary data\r\n   */\n  getDoctorVisitSummary() {\n    const summary = this.healthDataController.getDoctorVisitSummary();\n\n    // Format the data for presentation\n    return {\n      period: {\n        start: new Date(summary.period.start).toLocaleDateString(),\n        end: new Date(summary.period.end).toLocaleDateString()\n      },\n      keySymptoms: summary.keySymptoms.map(symptom => ({\n        name: symptom.name,\n        occurrences: symptom.occurrences,\n        avgSeverity: symptom.avgSeverity\n      })),\n      overallPatterns: summary.overallPatterns,\n      questions: summary.questions\n    };\n  }\n\n  /**\r\n   * Add a question to the doctor visit summary\r\n   * @param {String} question - The question to add\r\n   * @returns {Array} - Updated list of questions\r\n   */\n  addQuestion(question) {\n    // In a real implementation, this would update the model\n    // For this MVP, we'll just return a mock updated list\n    const summary = this.healthDataController.getDoctorVisitSummary();\n    return [...summary.questions, question];\n  }\n\n  /**\r\n   * Generate a printable/shareable version of the summary\r\n   * @returns {String} - Formatted summary text\r\n   */\n  generateShareableText() {\n    const summary = this.healthDataController.getDoctorVisitSummary();\n    let text = `Health Summary: ${new Date(summary.period.start).toLocaleDateString()} - ${new Date(summary.period.end).toLocaleDateString()}\\n\\n`;\n    text += \"Key Symptoms Reported:\\n\";\n    summary.keySymptoms.forEach(symptom => {\n      text += `- ${symptom.name}: ${symptom.occurrences} occurrences (avg. severity ${symptom.avgSeverity}/10)\\n`;\n    });\n    text += \"\\nOverall Patterns:\\n\";\n    summary.overallPatterns.forEach(pattern => {\n      text += `- ${pattern}\\n`;\n    });\n    text += \"\\nQuestions for Doctor:\\n\";\n    summary.questions.forEach(question => {\n      text += `- ${question}\\n`;\n    });\n    return text;\n  }\n}\nexport default DoctorVisitPresenter;","map":{"version":3,"names":["HealthDataController","DoctorVisitPresenter","constructor","healthDataController","getDoctorVisitSummary","summary","period","start","Date","toLocaleDateString","end","keySymptoms","map","symptom","name","occurrences","avgSeverity","overallPatterns","questions","addQuestion","question","generateShareableText","text","forEach","pattern"],"sources":["C:/Users/xiezh/OneDrive/Desktop/code/mlh-hackathon/hoohacks/health_sync_flutter/src/presenters/DoctorVisitPresenter.js"],"sourcesContent":["import HealthDataController from '../controllers/HealthDataController';\r\n\r\n/**\r\n * DoctorVisitPresenter - Handles presenting data for the Doctor Visit view\r\n */\r\nclass DoctorVisitPresenter {\r\n  constructor() {\r\n    this.healthDataController = new HealthDataController();\r\n  }\r\n\r\n  /**\r\n   * Get doctor visit summary data\r\n   * @returns {Object} - Doctor visit summary data\r\n   */\r\n  getDoctorVisitSummary() {\r\n    const summary = this.healthDataController.getDoctorVisitSummary();\r\n    \r\n    // Format the data for presentation\r\n    return {\r\n      period: {\r\n        start: new Date(summary.period.start).toLocaleDateString(),\r\n        end: new Date(summary.period.end).toLocaleDateString()\r\n      },\r\n      keySymptoms: summary.keySymptoms.map(symptom => ({\r\n        name: symptom.name,\r\n        occurrences: symptom.occurrences,\r\n        avgSeverity: symptom.avgSeverity\r\n      })),\r\n      overallPatterns: summary.overallPatterns,\r\n      questions: summary.questions\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Add a question to the doctor visit summary\r\n   * @param {String} question - The question to add\r\n   * @returns {Array} - Updated list of questions\r\n   */\r\n  addQuestion(question) {\r\n    // In a real implementation, this would update the model\r\n    // For this MVP, we'll just return a mock updated list\r\n    const summary = this.healthDataController.getDoctorVisitSummary();\r\n    return [...summary.questions, question];\r\n  }\r\n\r\n  /**\r\n   * Generate a printable/shareable version of the summary\r\n   * @returns {String} - Formatted summary text\r\n   */\r\n  generateShareableText() {\r\n    const summary = this.healthDataController.getDoctorVisitSummary();\r\n    \r\n    let text = `Health Summary: ${new Date(summary.period.start).toLocaleDateString()} - ${new Date(summary.period.end).toLocaleDateString()}\\n\\n`;\r\n    \r\n    text += \"Key Symptoms Reported:\\n\";\r\n    summary.keySymptoms.forEach(symptom => {\r\n      text += `- ${symptom.name}: ${symptom.occurrences} occurrences (avg. severity ${symptom.avgSeverity}/10)\\n`;\r\n    });\r\n    \r\n    text += \"\\nOverall Patterns:\\n\";\r\n    summary.overallPatterns.forEach(pattern => {\r\n      text += `- ${pattern}\\n`;\r\n    });\r\n    \r\n    text += \"\\nQuestions for Doctor:\\n\";\r\n    summary.questions.forEach(question => {\r\n      text += `- ${question}\\n`;\r\n    });\r\n    \r\n    return text;\r\n  }\r\n}\r\n\r\nexport default DoctorVisitPresenter;\r\n"],"mappings":"AAAA,OAAOA,oBAAoB,MAAM,qCAAqC;;AAEtE;AACA;AACA;AACA,MAAMC,oBAAoB,CAAC;EACzBC,WAAWA,CAAA,EAAG;IACZ,IAAI,CAACC,oBAAoB,GAAG,IAAIH,oBAAoB,CAAC,CAAC;EACxD;;EAEA;AACF;AACA;AACA;EACEI,qBAAqBA,CAAA,EAAG;IACtB,MAAMC,OAAO,GAAG,IAAI,CAACF,oBAAoB,CAACC,qBAAqB,CAAC,CAAC;;IAEjE;IACA,OAAO;MACLE,MAAM,EAAE;QACNC,KAAK,EAAE,IAAIC,IAAI,CAACH,OAAO,CAACC,MAAM,CAACC,KAAK,CAAC,CAACE,kBAAkB,CAAC,CAAC;QAC1DC,GAAG,EAAE,IAAIF,IAAI,CAACH,OAAO,CAACC,MAAM,CAACI,GAAG,CAAC,CAACD,kBAAkB,CAAC;MACvD,CAAC;MACDE,WAAW,EAAEN,OAAO,CAACM,WAAW,CAACC,GAAG,CAACC,OAAO,KAAK;QAC/CC,IAAI,EAAED,OAAO,CAACC,IAAI;QAClBC,WAAW,EAAEF,OAAO,CAACE,WAAW;QAChCC,WAAW,EAAEH,OAAO,CAACG;MACvB,CAAC,CAAC,CAAC;MACHC,eAAe,EAAEZ,OAAO,CAACY,eAAe;MACxCC,SAAS,EAAEb,OAAO,CAACa;IACrB,CAAC;EACH;;EAEA;AACF;AACA;AACA;AACA;EACEC,WAAWA,CAACC,QAAQ,EAAE;IACpB;IACA;IACA,MAAMf,OAAO,GAAG,IAAI,CAACF,oBAAoB,CAACC,qBAAqB,CAAC,CAAC;IACjE,OAAO,CAAC,GAAGC,OAAO,CAACa,SAAS,EAAEE,QAAQ,CAAC;EACzC;;EAEA;AACF;AACA;AACA;EACEC,qBAAqBA,CAAA,EAAG;IACtB,MAAMhB,OAAO,GAAG,IAAI,CAACF,oBAAoB,CAACC,qBAAqB,CAAC,CAAC;IAEjE,IAAIkB,IAAI,GAAG,mBAAmB,IAAId,IAAI,CAACH,OAAO,CAACC,MAAM,CAACC,KAAK,CAAC,CAACE,kBAAkB,CAAC,CAAC,MAAM,IAAID,IAAI,CAACH,OAAO,CAACC,MAAM,CAACI,GAAG,CAAC,CAACD,kBAAkB,CAAC,CAAC,MAAM;IAE9Ia,IAAI,IAAI,0BAA0B;IAClCjB,OAAO,CAACM,WAAW,CAACY,OAAO,CAACV,OAAO,IAAI;MACrCS,IAAI,IAAI,KAAKT,OAAO,CAACC,IAAI,KAAKD,OAAO,CAACE,WAAW,+BAA+BF,OAAO,CAACG,WAAW,QAAQ;IAC7G,CAAC,CAAC;IAEFM,IAAI,IAAI,uBAAuB;IAC/BjB,OAAO,CAACY,eAAe,CAACM,OAAO,CAACC,OAAO,IAAI;MACzCF,IAAI,IAAI,KAAKE,OAAO,IAAI;IAC1B,CAAC,CAAC;IAEFF,IAAI,IAAI,2BAA2B;IACnCjB,OAAO,CAACa,SAAS,CAACK,OAAO,CAACH,QAAQ,IAAI;MACpCE,IAAI,IAAI,KAAKF,QAAQ,IAAI;IAC3B,CAAC,CAAC;IAEF,OAAOE,IAAI;EACb;AACF;AAEA,eAAerB,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}