{"ast":null,"code":"import HealthDataController from'../controllers/HealthDataController';/**\r\n * DashboardPresenter - Handles presenting data for the Dashboard view\r\n */class DashboardPresenter{constructor(){this.healthDataController=new HealthDataController();}/**\r\n   * Get dashboard data\r\n   * @returns {Object} - Dashboard data\r\n   */getDashboardData(){const today=new Date();const startDate=new Date();startDate.setDate(today.getDate()-7);const summary=this.healthDataController.getHealthSummary(startDate,today);const recentEntries=this.healthDataController.healthData.getJournalEntriesInRange(startDate,today).sort((a,b)=>new Date(b.timestamp)-new Date(a.timestamp)).slice(0,3);return{summary,recentEntries,weeklyNarrative:this.healthDataController.getWeeklyNarrative()};}}export default DashboardPresenter;","map":{"version":3,"names":["HealthDataController","DashboardPresenter","constructor","healthDataController","getDashboardData","today","Date","startDate","setDate","getDate","summary","getHealthSummary","recentEntries","healthData","getJournalEntriesInRange","sort","a","b","timestamp","slice","weeklyNarrative","getWeeklyNarrative"],"sources":["C:/Users/xiezh/OneDrive/Desktop/code/mlh-hackathon/hoohacks/health_sync_flutter/src/presenters/DashboardPresenter.js"],"sourcesContent":["import HealthDataController from '../controllers/HealthDataController';\r\n\r\n/**\r\n * DashboardPresenter - Handles presenting data for the Dashboard view\r\n */\r\nclass DashboardPresenter {\r\n  constructor() {\r\n    this.healthDataController = new HealthDataController();\r\n  }\r\n\r\n  /**\r\n   * Get dashboard data\r\n   * @returns {Object} - Dashboard data\r\n   */\r\n  getDashboardData() {\r\n    const today = new Date();\r\n    const startDate = new Date();\r\n    startDate.setDate(today.getDate() - 7);\r\n    \r\n    const summary = this.healthDataController.getHealthSummary(startDate, today);\r\n    const recentEntries = this.healthDataController.healthData.getJournalEntriesInRange(\r\n      startDate, today\r\n    ).sort((a, b) => new Date(b.timestamp) - new Date(a.timestamp)).slice(0, 3);\r\n    \r\n    return {\r\n      summary,\r\n      recentEntries,\r\n      weeklyNarrative: this.healthDataController.getWeeklyNarrative()\r\n    };\r\n  }\r\n}\r\n\r\nexport default DashboardPresenter;\r\n"],"mappings":"AAAA,MAAO,CAAAA,oBAAoB,KAAM,qCAAqC,CAEtE;AACA;AACA,GACA,KAAM,CAAAC,kBAAmB,CACvBC,WAAWA,CAAA,CAAG,CACZ,IAAI,CAACC,oBAAoB,CAAG,GAAI,CAAAH,oBAAoB,CAAC,CAAC,CACxD,CAEA;AACF;AACA;AACA,KACEI,gBAAgBA,CAAA,CAAG,CACjB,KAAM,CAAAC,KAAK,CAAG,GAAI,CAAAC,IAAI,CAAC,CAAC,CACxB,KAAM,CAAAC,SAAS,CAAG,GAAI,CAAAD,IAAI,CAAC,CAAC,CAC5BC,SAAS,CAACC,OAAO,CAACH,KAAK,CAACI,OAAO,CAAC,CAAC,CAAG,CAAC,CAAC,CAEtC,KAAM,CAAAC,OAAO,CAAG,IAAI,CAACP,oBAAoB,CAACQ,gBAAgB,CAACJ,SAAS,CAAEF,KAAK,CAAC,CAC5E,KAAM,CAAAO,aAAa,CAAG,IAAI,CAACT,oBAAoB,CAACU,UAAU,CAACC,wBAAwB,CACjFP,SAAS,CAAEF,KACb,CAAC,CAACU,IAAI,CAAC,CAACC,CAAC,CAAEC,CAAC,GAAK,GAAI,CAAAX,IAAI,CAACW,CAAC,CAACC,SAAS,CAAC,CAAG,GAAI,CAAAZ,IAAI,CAACU,CAAC,CAACE,SAAS,CAAC,CAAC,CAACC,KAAK,CAAC,CAAC,CAAE,CAAC,CAAC,CAE3E,MAAO,CACLT,OAAO,CACPE,aAAa,CACbQ,eAAe,CAAE,IAAI,CAACjB,oBAAoB,CAACkB,kBAAkB,CAAC,CAChE,CAAC,CACH,CACF,CAEA,cAAe,CAAApB,kBAAkB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}