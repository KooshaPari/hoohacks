{"ast":null,"code":"/**\r\n * HealthData model - Represents the core health data structure\r\n */class HealthData{constructor(){this.journalEntries=[];this.healthMetrics={sleep:[],activity:[],heartRate:[]};}/**\r\n   * Add a new journal entry\r\n   * @param {Object} entry - The journal entry to add\r\n   */addJournalEntry(entry){// Generate an ID if none exists\nif(!entry.id){entry.id=Date.now().toString();}// Add timestamp if none exists\nif(!entry.timestamp){entry.timestamp=new Date().toISOString();}this.journalEntries.push(entry);return entry;}/**\r\n   * Get journal entries within a date range\r\n   * @param {Date} startDate - Start of the date range\r\n   * @param {Date} endDate - End of the date range\r\n   * @returns {Array} - Filtered journal entries\r\n   */getJournalEntriesInRange(startDate,endDate){return this.journalEntries.filter(entry=>{const entryDate=new Date(entry.timestamp);return entryDate>=startDate&&entryDate<=endDate;});}/**\r\n   * Add health metrics\r\n   * @param {String} type - Type of health metric (sleep, activity, heartRate)\r\n   * @param {Object} data - The metric data\r\n   */addHealthMetric(type,data){if(!this.healthMetrics[type]){this.healthMetrics[type]=[];}// Add timestamp if none exists\nif(!data.timestamp){data.timestamp=new Date().toISOString();}this.healthMetrics[type].push(data);return data;}/**\r\n   * Get health metrics within a date range\r\n   * @param {String} type - Type of health metric\r\n   * @param {Date} startDate - Start of the date range\r\n   * @param {Date} endDate - End of the date range\r\n   * @returns {Array} - Filtered health metrics\r\n   */getHealthMetricsInRange(type,startDate,endDate){if(!this.healthMetrics[type]){return[];}return this.healthMetrics[type].filter(metric=>{const metricDate=new Date(metric.timestamp);return metricDate>=startDate&&metricDate<=endDate;});}}export default HealthData;","map":{"version":3,"names":["HealthData","constructor","journalEntries","healthMetrics","sleep","activity","heartRate","addJournalEntry","entry","id","Date","now","toString","timestamp","toISOString","push","getJournalEntriesInRange","startDate","endDate","filter","entryDate","addHealthMetric","type","data","getHealthMetricsInRange","metric","metricDate"],"sources":["C:/Users/xiezh/OneDrive/Desktop/code/mlh-hackathon/hoohacks/health_sync_flutter/src/models/HealthData.js"],"sourcesContent":["/**\r\n * HealthData model - Represents the core health data structure\r\n */\r\nclass HealthData {\r\n  constructor() {\r\n    this.journalEntries = [];\r\n    this.healthMetrics = {\r\n      sleep: [],\r\n      activity: [],\r\n      heartRate: []\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Add a new journal entry\r\n   * @param {Object} entry - The journal entry to add\r\n   */\r\n  addJournalEntry(entry) {\r\n    // Generate an ID if none exists\r\n    if (!entry.id) {\r\n      entry.id = Date.now().toString();\r\n    }\r\n    \r\n    // Add timestamp if none exists\r\n    if (!entry.timestamp) {\r\n      entry.timestamp = new Date().toISOString();\r\n    }\r\n    \r\n    this.journalEntries.push(entry);\r\n    return entry;\r\n  }\r\n\r\n  /**\r\n   * Get journal entries within a date range\r\n   * @param {Date} startDate - Start of the date range\r\n   * @param {Date} endDate - End of the date range\r\n   * @returns {Array} - Filtered journal entries\r\n   */\r\n  getJournalEntriesInRange(startDate, endDate) {\r\n    return this.journalEntries.filter(entry => {\r\n      const entryDate = new Date(entry.timestamp);\r\n      return entryDate >= startDate && entryDate <= endDate;\r\n    });\r\n  }\r\n\r\n  /**\r\n   * Add health metrics\r\n   * @param {String} type - Type of health metric (sleep, activity, heartRate)\r\n   * @param {Object} data - The metric data\r\n   */\r\n  addHealthMetric(type, data) {\r\n    if (!this.healthMetrics[type]) {\r\n      this.healthMetrics[type] = [];\r\n    }\r\n    \r\n    // Add timestamp if none exists\r\n    if (!data.timestamp) {\r\n      data.timestamp = new Date().toISOString();\r\n    }\r\n    \r\n    this.healthMetrics[type].push(data);\r\n    return data;\r\n  }\r\n\r\n  /**\r\n   * Get health metrics within a date range\r\n   * @param {String} type - Type of health metric\r\n   * @param {Date} startDate - Start of the date range\r\n   * @param {Date} endDate - End of the date range\r\n   * @returns {Array} - Filtered health metrics\r\n   */\r\n  getHealthMetricsInRange(type, startDate, endDate) {\r\n    if (!this.healthMetrics[type]) {\r\n      return [];\r\n    }\r\n    \r\n    return this.healthMetrics[type].filter(metric => {\r\n      const metricDate = new Date(metric.timestamp);\r\n      return metricDate >= startDate && metricDate <= endDate;\r\n    });\r\n  }\r\n}\r\n\r\nexport default HealthData;\r\n"],"mappings":"AAAA;AACA;AACA,GACA,KAAM,CAAAA,UAAW,CACfC,WAAWA,CAAA,CAAG,CACZ,IAAI,CAACC,cAAc,CAAG,EAAE,CACxB,IAAI,CAACC,aAAa,CAAG,CACnBC,KAAK,CAAE,EAAE,CACTC,QAAQ,CAAE,EAAE,CACZC,SAAS,CAAE,EACb,CAAC,CACH,CAEA;AACF;AACA;AACA,KACEC,eAAeA,CAACC,KAAK,CAAE,CACrB;AACA,GAAI,CAACA,KAAK,CAACC,EAAE,CAAE,CACbD,KAAK,CAACC,EAAE,CAAGC,IAAI,CAACC,GAAG,CAAC,CAAC,CAACC,QAAQ,CAAC,CAAC,CAClC,CAEA;AACA,GAAI,CAACJ,KAAK,CAACK,SAAS,CAAE,CACpBL,KAAK,CAACK,SAAS,CAAG,GAAI,CAAAH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC,CAC5C,CAEA,IAAI,CAACZ,cAAc,CAACa,IAAI,CAACP,KAAK,CAAC,CAC/B,MAAO,CAAAA,KAAK,CACd,CAEA;AACF;AACA;AACA;AACA;AACA,KACEQ,wBAAwBA,CAACC,SAAS,CAAEC,OAAO,CAAE,CAC3C,MAAO,KAAI,CAAChB,cAAc,CAACiB,MAAM,CAACX,KAAK,EAAI,CACzC,KAAM,CAAAY,SAAS,CAAG,GAAI,CAAAV,IAAI,CAACF,KAAK,CAACK,SAAS,CAAC,CAC3C,MAAO,CAAAO,SAAS,EAAIH,SAAS,EAAIG,SAAS,EAAIF,OAAO,CACvD,CAAC,CAAC,CACJ,CAEA;AACF;AACA;AACA;AACA,KACEG,eAAeA,CAACC,IAAI,CAAEC,IAAI,CAAE,CAC1B,GAAI,CAAC,IAAI,CAACpB,aAAa,CAACmB,IAAI,CAAC,CAAE,CAC7B,IAAI,CAACnB,aAAa,CAACmB,IAAI,CAAC,CAAG,EAAE,CAC/B,CAEA;AACA,GAAI,CAACC,IAAI,CAACV,SAAS,CAAE,CACnBU,IAAI,CAACV,SAAS,CAAG,GAAI,CAAAH,IAAI,CAAC,CAAC,CAACI,WAAW,CAAC,CAAC,CAC3C,CAEA,IAAI,CAACX,aAAa,CAACmB,IAAI,CAAC,CAACP,IAAI,CAACQ,IAAI,CAAC,CACnC,MAAO,CAAAA,IAAI,CACb,CAEA;AACF;AACA;AACA;AACA;AACA;AACA,KACEC,uBAAuBA,CAACF,IAAI,CAAEL,SAAS,CAAEC,OAAO,CAAE,CAChD,GAAI,CAAC,IAAI,CAACf,aAAa,CAACmB,IAAI,CAAC,CAAE,CAC7B,MAAO,EAAE,CACX,CAEA,MAAO,KAAI,CAACnB,aAAa,CAACmB,IAAI,CAAC,CAACH,MAAM,CAACM,MAAM,EAAI,CAC/C,KAAM,CAAAC,UAAU,CAAG,GAAI,CAAAhB,IAAI,CAACe,MAAM,CAACZ,SAAS,CAAC,CAC7C,MAAO,CAAAa,UAAU,EAAIT,SAAS,EAAIS,UAAU,EAAIR,OAAO,CACzD,CAAC,CAAC,CACJ,CACF,CAEA,cAAe,CAAAlB,UAAU","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}