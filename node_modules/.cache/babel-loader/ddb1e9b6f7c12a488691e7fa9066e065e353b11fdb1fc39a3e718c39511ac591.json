{"ast":null,"code":"import HealthData from'../models/HealthData';/**\n * HealthDataController - Handles business logic for health data\n */class HealthDataController{constructor(){this.healthData=new HealthData();this.loadMockData();}/**\n   * Load mock data for demo purposes\n   */loadMockData(){// Mock journal entries\nconst journalEntries=[{id:'1',timestamp:new Date('2025-03-25T08:30:00').toISOString(),mood:3,energy:2,symptoms:[{name:'Headache',severity:6}],notes:'Slept poorly last night. Busy day with back-to-back meetings.',tags:['stress','poor_sleep']},{id:'2',timestamp:new Date('2025-03-26T09:15:00').toISOString(),mood:3,energy:3,symptoms:[],notes:'Feeling better today. Made time for breakfast.',tags:[]},{id:'3',timestamp:new Date('2025-03-27T08:45:00').toISOString(),mood:4,energy:4,symptoms:[],notes:'Productive day. Took a walk during lunch break.',tags:['good_day']},{id:'4',timestamp:new Date('2025-03-28T07:30:00').toISOString(),mood:3,energy:3,symptoms:[],notes:'Normal day. Nothing special to report.',tags:[]},{id:'5',timestamp:new Date('2025-03-29T08:00:00').toISOString(),mood:2,energy:2,symptoms:[{name:'Headache',severity:7},{name:'Fatigue',severity:6}],notes:'Skipped breakfast, worked through lunch. Headache started around 2pm.',tags:['skipped_meals','headache']}];journalEntries.forEach(entry=>this.healthData.addJournalEntry(entry));// Mock sleep data\nconst sleepData=[{timestamp:new Date('2025-03-25T00:00:00').toISOString(),duration:5.5,quality:'poor'},{timestamp:new Date('2025-03-26T00:00:00').toISOString(),duration:6.5,quality:'fair'},{timestamp:new Date('2025-03-27T00:00:00').toISOString(),duration:7.2,quality:'good'},{timestamp:new Date('2025-03-28T00:00:00').toISOString(),duration:6.8,quality:'fair'},{timestamp:new Date('2025-03-29T00:00:00').toISOString(),duration:6.1,quality:'fair'}];sleepData.forEach(data=>this.healthData.addHealthMetric('sleep',data));// Mock activity data\nconst activityData=[{timestamp:new Date('2025-03-25T00:00:00').toISOString(),steps:4200,activeCalories:180},{timestamp:new Date('2025-03-26T00:00:00').toISOString(),steps:6500,activeCalories:240},{timestamp:new Date('2025-03-27T00:00:00').toISOString(),steps:9100,activeCalories:320},{timestamp:new Date('2025-03-28T00:00:00').toISOString(),steps:7200,activeCalories:270},{timestamp:new Date('2025-03-29T00:00:00').toISOString(),steps:3800,activeCalories:150}];activityData.forEach(data=>this.healthData.addHealthMetric('activity',data));// Mock heart rate data\nconst heartRateData=[{timestamp:new Date('2025-03-25T00:00:00').toISOString(),resting:72},{timestamp:new Date('2025-03-26T00:00:00').toISOString(),resting:70},{timestamp:new Date('2025-03-27T00:00:00').toISOString(),resting:68},{timestamp:new Date('2025-03-28T00:00:00').toISOString(),resting:69},{timestamp:new Date('2025-03-29T00:00:00').toISOString(),resting:74}];heartRateData.forEach(data=>this.healthData.addHealthMetric('heartRate',data));}/**\n   * Get a summary of health data for a specific date range\n   * @param {Date} startDate - Start of date range\n   * @param {Date} endDate - End of date range\n   * @returns {Object} - Summary of health data\n   */getHealthSummary(startDate,endDate){const journalEntries=this.healthData.getJournalEntriesInRange(startDate,endDate);const sleepData=this.healthData.getHealthMetricsInRange('sleep',startDate,endDate);const activityData=this.healthData.getHealthMetricsInRange('activity',startDate,endDate);const heartRateData=this.healthData.getHealthMetricsInRange('heartRate',startDate,endDate);// Calculate summary statistics\nconst moodAverage=this.calculateAverage(journalEntries.map(entry=>entry.mood));const energyAverage=this.calculateAverage(journalEntries.map(entry=>entry.energy));const symptomCounts=this.countSymptoms(journalEntries);const sleepAverage=this.calculateAverage(sleepData.map(data=>data.duration));const stepsAverage=this.calculateAverage(activityData.map(data=>data.steps));const restingHRAverage=this.calculateAverage(heartRateData.map(data=>data.resting));// Format summary\nreturn{period:{start:startDate.toISOString(),end:endDate.toISOString()},entries:journalEntries.length,mood:{average:moodAverage},energy:{average:energyAverage},symptoms:symptomCounts,sleep:{average:sleepAverage},activity:{averageSteps:stepsAverage},heartRate:{averageResting:restingHRAverage}};}/**\n   * Get data for pattern analysis\n   * @param {String} symptom - The symptom to analyze\n   * @param {Date} startDate - Start of date range\n   * @param {Date} endDate - End of date range\n   * @returns {Object} - Pattern analysis data\n   */getPatternAnalysis(symptom,startDate,endDate){const journalEntries=this.healthData.getJournalEntriesInRange(startDate,endDate);const sleepData=this.healthData.getHealthMetricsInRange('sleep',startDate,endDate);const activityData=this.healthData.getHealthMetricsInRange('activity',startDate,endDate);// Separate entries with and without the symptom\nconst symptomDays=journalEntries.filter(entry=>entry.symptoms.some(s=>s.name.toLowerCase()===symptom.toLowerCase()));const nonSymptomDays=journalEntries.filter(entry=>!entry.symptoms.some(s=>s.name.toLowerCase()===symptom.toLowerCase()));// Calculate averages for both groups\nconst symptomSleepAvg=this.calculateAverageForDays(symptomDays,sleepData,'duration');const nonSymptomSleepAvg=this.calculateAverageForDays(nonSymptomDays,sleepData,'duration');const symptomStepsAvg=this.calculateAverageForDays(symptomDays,activityData,'steps');const nonSymptomStepsAvg=this.calculateAverageForDays(nonSymptomDays,activityData,'steps');// Get tags frequency\nconst symptomTags=this.getTagsFrequency(symptomDays);const nonSymptomTags=this.getTagsFrequency(nonSymptomDays);return{symptom,period:{start:startDate.toISOString(),end:endDate.toISOString()},symptomDaysCount:symptomDays.length,nonSymptomDaysCount:nonSymptomDays.length,comparisons:{sleep:{symptomDaysAvg:symptomSleepAvg,nonSymptomDaysAvg:nonSymptomSleepAvg,difference:nonSymptomSleepAvg-symptomSleepAvg},activity:{symptomDaysAvg:symptomStepsAvg,nonSymptomDaysAvg:nonSymptomStepsAvg,difference:nonSymptomStepsAvg-symptomStepsAvg}},tags:{symptomDays:symptomTags,nonSymptomDays:nonSymptomTags}};}/**\n   * Get the weekly narrative summary\n   * @returns {String} - Narrative text\n   */getWeeklyNarrative(){const endDate=new Date();const startDate=new Date();startDate.setDate(startDate.getDate()-7);const summary=this.getHealthSummary(startDate,endDate);// Generate a narrative\nlet narrative=\"Your Week in Review\\n\\n\";if(summary.symptoms.Headache){narrative+=`This week, you logged headaches on ${summary.symptoms.Headache.count} days, `;narrative+=`typically rating them as moderate to severe (${summary.symptoms.Headache.avgSeverity}/10). `;}narrative+=`Your energy levels tended to be higher on days when you slept more than 7 hours `;narrative+=`and took more than 8,000 steps. `;if(summary.symptoms.Headache&&summary.symptoms.Headache.count>0){narrative+=`Notably, headache days occurred when you had fewer than 6 hours of sleep `;narrative+=`and lower physical activity. Your heart rate was also slightly elevated on these days `;narrative+=`compared to your headache-free days.`;}return narrative;}/**\n   * Get doctor visit summary\n   * @returns {Object} - Summary data for doctor visit\n   */getDoctorVisitSummary(){const endDate=new Date();const startDate=new Date();startDate.setDate(startDate.getDate()-30);const summary=this.getHealthSummary(startDate,endDate);const journalEntries=this.healthData.getJournalEntriesInRange(startDate,endDate);// Get all unique symptoms\nconst symptoms={};journalEntries.forEach(entry=>{entry.symptoms.forEach(symptom=>{if(!symptoms[symptom.name]){symptoms[symptom.name]={occurrences:0,totalSeverity:0};}symptoms[symptom.name].occurrences+=1;symptoms[symptom.name].totalSeverity+=symptom.severity;});});// Calculate average severity\nObject.keys(symptoms).forEach(name=>{symptoms[name].avgSeverity=Math.round(symptoms[name].totalSeverity/symptoms[name].occurrences*10)/10;});// Format doctor visit summary\nreturn{period:{start:startDate.toISOString(),end:endDate.toISOString()},keySymptoms:Object.keys(symptoms).map(name=>({name,occurrences:symptoms[name].occurrences,avgSeverity:symptoms[name].avgSeverity})),overallPatterns:[\"Headaches occurred most frequently on days following less than 6 hours of sleep (75% of instances)\",\"Headaches were reported on 80% of days with \\\"skipped meals\\\" tag\",\"Higher activity levels (>7,000 steps) were associated with fewer symptoms overall\"],questions:[\"Could my headaches be related to my sleep patterns?\",\"Are there specific types of physical activity you'd recommend?\",\"Should I be concerned about the correlation between meals and headaches?\"]};}/**\n   * Save a new journal entry\n   * @param {Object} entry - The journal entry to save\n   * @returns {Object} - The saved entry\n   */saveJournalEntry(entry){return this.healthData.addJournalEntry(entry);}/**\n   * Calculate average value from an array of numbers\n   * @param {Array} values - Array of numbers\n   * @returns {Number} - The average\n   */calculateAverage(values){if(values.length===0)return 0;const sum=values.reduce((total,value)=>total+value,0);return Math.round(sum/values.length*10)/10;}/**\n   * Count symptoms from journal entries\n   * @param {Array} entries - Journal entries\n   * @returns {Object} - Symptom counts and stats\n   */countSymptoms(entries){const symptoms={};entries.forEach(entry=>{entry.symptoms.forEach(symptom=>{if(!symptoms[symptom.name]){symptoms[symptom.name]={count:0,totalSeverity:0};}symptoms[symptom.name].count+=1;symptoms[symptom.name].totalSeverity+=symptom.severity;});});// Calculate average severity\nObject.keys(symptoms).forEach(name=>{symptoms[name].avgSeverity=Math.round(symptoms[name].totalSeverity/symptoms[name].count*10)/10;});return symptoms;}/**\n   * Calculate average for a specific metric on specific days\n   * @param {Array} days - Array of day entries\n   * @param {Array} metricData - Array of metric data\n   * @param {String} metricKey - The metric key to average\n   * @returns {Number} - The average\n   */calculateAverageForDays(days,metricData,metricKey){if(days.length===0)return 0;const dayTimestamps=days.map(day=>this.getDateString(new Date(day.timestamp)));const relevantMetrics=metricData.filter(metric=>dayTimestamps.includes(this.getDateString(new Date(metric.timestamp))));return this.calculateAverage(relevantMetrics.map(metric=>metric[metricKey]));}/**\n   * Get the frequency of tags in journal entries\n   * @param {Array} entries - Journal entries\n   * @returns {Object} - Tag frequencies\n   */getTagsFrequency(entries){const tags={};entries.forEach(entry=>{entry.tags.forEach(tag=>{if(!tags[tag]){tags[tag]=0;}tags[tag]+=1;});});return tags;}/**\n   * Get date string (YYYY-MM-DD) from Date object\n   * @param {Date} date - The date\n   * @returns {String} - Date string\n   */getDateString(date){return date.toISOString().split('T')[0];}}export default HealthDataController;","map":{"version":3,"names":["HealthData","HealthDataController","constructor","healthData","loadMockData","journalEntries","id","timestamp","Date","toISOString","mood","energy","symptoms","name","severity","notes","tags","forEach","entry","addJournalEntry","sleepData","duration","quality","data","addHealthMetric","activityData","steps","activeCalories","heartRateData","resting","getHealthSummary","startDate","endDate","getJournalEntriesInRange","getHealthMetricsInRange","moodAverage","calculateAverage","map","energyAverage","symptomCounts","countSymptoms","sleepAverage","stepsAverage","restingHRAverage","period","start","end","entries","length","average","sleep","activity","averageSteps","heartRate","averageResting","getPatternAnalysis","symptom","symptomDays","filter","some","s","toLowerCase","nonSymptomDays","symptomSleepAvg","calculateAverageForDays","nonSymptomSleepAvg","symptomStepsAvg","nonSymptomStepsAvg","symptomTags","getTagsFrequency","nonSymptomTags","symptomDaysCount","nonSymptomDaysCount","comparisons","symptomDaysAvg","nonSymptomDaysAvg","difference","getWeeklyNarrative","setDate","getDate","summary","narrative","Headache","count","avgSeverity","getDoctorVisitSummary","occurrences","totalSeverity","Object","keys","Math","round","keySymptoms","overallPatterns","questions","saveJournalEntry","values","sum","reduce","total","value","days","metricData","metricKey","dayTimestamps","day","getDateString","relevantMetrics","metric","includes","tag","date","split"],"sources":["/Users/kooshapari/temp-PRODVERCEL/hoohacks/tester/src/controllers/HealthDataController.js"],"sourcesContent":["import HealthData from '../models/HealthData';\n\n/**\n * HealthDataController - Handles business logic for health data\n */\nclass HealthDataController {\n  constructor() {\n    this.healthData = new HealthData();\n    this.loadMockData();\n  }\n\n  /**\n   * Load mock data for demo purposes\n   */\n  loadMockData() {\n    // Mock journal entries\n    const journalEntries = [\n      {\n        id: '1',\n        timestamp: new Date('2025-03-25T08:30:00').toISOString(),\n        mood: 3,\n        energy: 2,\n        symptoms: [{name: 'Headache', severity: 6}],\n        notes: 'Slept poorly last night. Busy day with back-to-back meetings.',\n        tags: ['stress', 'poor_sleep']\n      },\n      {\n        id: '2',\n        timestamp: new Date('2025-03-26T09:15:00').toISOString(),\n        mood: 3,\n        energy: 3,\n        symptoms: [],\n        notes: 'Feeling better today. Made time for breakfast.',\n        tags: []\n      },\n      {\n        id: '3',\n        timestamp: new Date('2025-03-27T08:45:00').toISOString(),\n        mood: 4,\n        energy: 4,\n        symptoms: [],\n        notes: 'Productive day. Took a walk during lunch break.',\n        tags: ['good_day']\n      },\n      {\n        id: '4',\n        timestamp: new Date('2025-03-28T07:30:00').toISOString(),\n        mood: 3,\n        energy: 3,\n        symptoms: [],\n        notes: 'Normal day. Nothing special to report.',\n        tags: []\n      },\n      {\n        id: '5',\n        timestamp: new Date('2025-03-29T08:00:00').toISOString(),\n        mood: 2,\n        energy: 2,\n        symptoms: [{name: 'Headache', severity: 7}, {name: 'Fatigue', severity: 6}],\n        notes: 'Skipped breakfast, worked through lunch. Headache started around 2pm.',\n        tags: ['skipped_meals', 'headache']\n      }\n    ];\n    \n    journalEntries.forEach(entry => this.healthData.addJournalEntry(entry));\n    \n    // Mock sleep data\n    const sleepData = [\n      { timestamp: new Date('2025-03-25T00:00:00').toISOString(), duration: 5.5, quality: 'poor' },\n      { timestamp: new Date('2025-03-26T00:00:00').toISOString(), duration: 6.5, quality: 'fair' },\n      { timestamp: new Date('2025-03-27T00:00:00').toISOString(), duration: 7.2, quality: 'good' },\n      { timestamp: new Date('2025-03-28T00:00:00').toISOString(), duration: 6.8, quality: 'fair' },\n      { timestamp: new Date('2025-03-29T00:00:00').toISOString(), duration: 6.1, quality: 'fair' }\n    ];\n    \n    sleepData.forEach(data => this.healthData.addHealthMetric('sleep', data));\n    \n    // Mock activity data\n    const activityData = [\n      { timestamp: new Date('2025-03-25T00:00:00').toISOString(), steps: 4200, activeCalories: 180 },\n      { timestamp: new Date('2025-03-26T00:00:00').toISOString(), steps: 6500, activeCalories: 240 },\n      { timestamp: new Date('2025-03-27T00:00:00').toISOString(), steps: 9100, activeCalories: 320 },\n      { timestamp: new Date('2025-03-28T00:00:00').toISOString(), steps: 7200, activeCalories: 270 },\n      { timestamp: new Date('2025-03-29T00:00:00').toISOString(), steps: 3800, activeCalories: 150 }\n    ];\n    \n    activityData.forEach(data => this.healthData.addHealthMetric('activity', data));\n    \n    // Mock heart rate data\n    const heartRateData = [\n      { timestamp: new Date('2025-03-25T00:00:00').toISOString(), resting: 72 },\n      { timestamp: new Date('2025-03-26T00:00:00').toISOString(), resting: 70 },\n      { timestamp: new Date('2025-03-27T00:00:00').toISOString(), resting: 68 },\n      { timestamp: new Date('2025-03-28T00:00:00').toISOString(), resting: 69 },\n      { timestamp: new Date('2025-03-29T00:00:00').toISOString(), resting: 74 }\n    ];\n    \n    heartRateData.forEach(data => this.healthData.addHealthMetric('heartRate', data));\n  }\n\n  /**\n   * Get a summary of health data for a specific date range\n   * @param {Date} startDate - Start of date range\n   * @param {Date} endDate - End of date range\n   * @returns {Object} - Summary of health data\n   */\n  getHealthSummary(startDate, endDate) {\n    const journalEntries = this.healthData.getJournalEntriesInRange(startDate, endDate);\n    const sleepData = this.healthData.getHealthMetricsInRange('sleep', startDate, endDate);\n    const activityData = this.healthData.getHealthMetricsInRange('activity', startDate, endDate);\n    const heartRateData = this.healthData.getHealthMetricsInRange('heartRate', startDate, endDate);\n    \n    // Calculate summary statistics\n    const moodAverage = this.calculateAverage(journalEntries.map(entry => entry.mood));\n    const energyAverage = this.calculateAverage(journalEntries.map(entry => entry.energy));\n    const symptomCounts = this.countSymptoms(journalEntries);\n    const sleepAverage = this.calculateAverage(sleepData.map(data => data.duration));\n    const stepsAverage = this.calculateAverage(activityData.map(data => data.steps));\n    const restingHRAverage = this.calculateAverage(heartRateData.map(data => data.resting));\n    \n    // Format summary\n    return {\n      period: {\n        start: startDate.toISOString(),\n        end: endDate.toISOString()\n      },\n      entries: journalEntries.length,\n      mood: {\n        average: moodAverage\n      },\n      energy: {\n        average: energyAverage\n      },\n      symptoms: symptomCounts,\n      sleep: {\n        average: sleepAverage\n      },\n      activity: {\n        averageSteps: stepsAverage\n      },\n      heartRate: {\n        averageResting: restingHRAverage\n      }\n    };\n  }\n\n  /**\n   * Get data for pattern analysis\n   * @param {String} symptom - The symptom to analyze\n   * @param {Date} startDate - Start of date range\n   * @param {Date} endDate - End of date range\n   * @returns {Object} - Pattern analysis data\n   */\n  getPatternAnalysis(symptom, startDate, endDate) {\n    const journalEntries = this.healthData.getJournalEntriesInRange(startDate, endDate);\n    const sleepData = this.healthData.getHealthMetricsInRange('sleep', startDate, endDate);\n    const activityData = this.healthData.getHealthMetricsInRange('activity', startDate, endDate);\n    \n    // Separate entries with and without the symptom\n    const symptomDays = journalEntries.filter(entry => \n      entry.symptoms.some(s => s.name.toLowerCase() === symptom.toLowerCase())\n    );\n    \n    const nonSymptomDays = journalEntries.filter(entry => \n      !entry.symptoms.some(s => s.name.toLowerCase() === symptom.toLowerCase())\n    );\n    \n    // Calculate averages for both groups\n    const symptomSleepAvg = this.calculateAverageForDays(symptomDays, sleepData, 'duration');\n    const nonSymptomSleepAvg = this.calculateAverageForDays(nonSymptomDays, sleepData, 'duration');\n    \n    const symptomStepsAvg = this.calculateAverageForDays(symptomDays, activityData, 'steps');\n    const nonSymptomStepsAvg = this.calculateAverageForDays(nonSymptomDays, activityData, 'steps');\n    \n    // Get tags frequency\n    const symptomTags = this.getTagsFrequency(symptomDays);\n    const nonSymptomTags = this.getTagsFrequency(nonSymptomDays);\n    \n    return {\n      symptom,\n      period: {\n        start: startDate.toISOString(),\n        end: endDate.toISOString()\n      },\n      symptomDaysCount: symptomDays.length,\n      nonSymptomDaysCount: nonSymptomDays.length,\n      comparisons: {\n        sleep: {\n          symptomDaysAvg: symptomSleepAvg,\n          nonSymptomDaysAvg: nonSymptomSleepAvg,\n          difference: nonSymptomSleepAvg - symptomSleepAvg\n        },\n        activity: {\n          symptomDaysAvg: symptomStepsAvg,\n          nonSymptomDaysAvg: nonSymptomStepsAvg,\n          difference: nonSymptomStepsAvg - symptomStepsAvg\n        }\n      },\n      tags: {\n        symptomDays: symptomTags,\n        nonSymptomDays: nonSymptomTags\n      }\n    };\n  }\n\n  /**\n   * Get the weekly narrative summary\n   * @returns {String} - Narrative text\n   */\n  getWeeklyNarrative() {\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 7);\n    \n    const summary = this.getHealthSummary(startDate, endDate);\n    \n    // Generate a narrative\n    let narrative = \"Your Week in Review\\n\\n\";\n    \n    if (summary.symptoms.Headache) {\n      narrative += `This week, you logged headaches on ${summary.symptoms.Headache.count} days, `;\n      narrative += `typically rating them as moderate to severe (${summary.symptoms.Headache.avgSeverity}/10). `;\n    }\n    \n    narrative += `Your energy levels tended to be higher on days when you slept more than 7 hours `;\n    narrative += `and took more than 8,000 steps. `;\n    \n    if (summary.symptoms.Headache && summary.symptoms.Headache.count > 0) {\n      narrative += `Notably, headache days occurred when you had fewer than 6 hours of sleep `;\n      narrative += `and lower physical activity. Your heart rate was also slightly elevated on these days `;\n      narrative += `compared to your headache-free days.`;\n    }\n    \n    return narrative;\n  }\n\n  /**\n   * Get doctor visit summary\n   * @returns {Object} - Summary data for doctor visit\n   */\n  getDoctorVisitSummary() {\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 30);\n    \n    const summary = this.getHealthSummary(startDate, endDate);\n    const journalEntries = this.healthData.getJournalEntriesInRange(startDate, endDate);\n    \n    // Get all unique symptoms\n    const symptoms = {};\n    journalEntries.forEach(entry => {\n      entry.symptoms.forEach(symptom => {\n        if (!symptoms[symptom.name]) {\n          symptoms[symptom.name] = {\n            occurrences: 0,\n            totalSeverity: 0\n          };\n        }\n        symptoms[symptom.name].occurrences += 1;\n        symptoms[symptom.name].totalSeverity += symptom.severity;\n      });\n    });\n    \n    // Calculate average severity\n    Object.keys(symptoms).forEach(name => {\n      symptoms[name].avgSeverity = \n        Math.round((symptoms[name].totalSeverity / symptoms[name].occurrences) * 10) / 10;\n    });\n    \n    // Format doctor visit summary\n    return {\n      period: {\n        start: startDate.toISOString(),\n        end: endDate.toISOString()\n      },\n      keySymptoms: Object.keys(symptoms).map(name => ({\n        name,\n        occurrences: symptoms[name].occurrences,\n        avgSeverity: symptoms[name].avgSeverity\n      })),\n      overallPatterns: [\n        \"Headaches occurred most frequently on days following less than 6 hours of sleep (75% of instances)\",\n        \"Headaches were reported on 80% of days with \\\"skipped meals\\\" tag\",\n        \"Higher activity levels (>7,000 steps) were associated with fewer symptoms overall\"\n      ],\n      questions: [\n        \"Could my headaches be related to my sleep patterns?\",\n        \"Are there specific types of physical activity you'd recommend?\",\n        \"Should I be concerned about the correlation between meals and headaches?\"\n      ]\n    };\n  }\n\n  /**\n   * Save a new journal entry\n   * @param {Object} entry - The journal entry to save\n   * @returns {Object} - The saved entry\n   */\n  saveJournalEntry(entry) {\n    return this.healthData.addJournalEntry(entry);\n  }\n\n  /**\n   * Calculate average value from an array of numbers\n   * @param {Array} values - Array of numbers\n   * @returns {Number} - The average\n   */\n  calculateAverage(values) {\n    if (values.length === 0) return 0;\n    const sum = values.reduce((total, value) => total + value, 0);\n    return Math.round((sum / values.length) * 10) / 10;\n  }\n\n  /**\n   * Count symptoms from journal entries\n   * @param {Array} entries - Journal entries\n   * @returns {Object} - Symptom counts and stats\n   */\n  countSymptoms(entries) {\n    const symptoms = {};\n    \n    entries.forEach(entry => {\n      entry.symptoms.forEach(symptom => {\n        if (!symptoms[symptom.name]) {\n          symptoms[symptom.name] = {\n            count: 0,\n            totalSeverity: 0\n          };\n        }\n        symptoms[symptom.name].count += 1;\n        symptoms[symptom.name].totalSeverity += symptom.severity;\n      });\n    });\n    \n    // Calculate average severity\n    Object.keys(symptoms).forEach(name => {\n      symptoms[name].avgSeverity = \n        Math.round((symptoms[name].totalSeverity / symptoms[name].count) * 10) / 10;\n    });\n    \n    return symptoms;\n  }\n\n  /**\n   * Calculate average for a specific metric on specific days\n   * @param {Array} days - Array of day entries\n   * @param {Array} metricData - Array of metric data\n   * @param {String} metricKey - The metric key to average\n   * @returns {Number} - The average\n   */\n  calculateAverageForDays(days, metricData, metricKey) {\n    if (days.length === 0) return 0;\n    \n    const dayTimestamps = days.map(day => this.getDateString(new Date(day.timestamp)));\n    const relevantMetrics = metricData.filter(metric => \n      dayTimestamps.includes(this.getDateString(new Date(metric.timestamp)))\n    );\n    \n    return this.calculateAverage(relevantMetrics.map(metric => metric[metricKey]));\n  }\n\n  /**\n   * Get the frequency of tags in journal entries\n   * @param {Array} entries - Journal entries\n   * @returns {Object} - Tag frequencies\n   */\n  getTagsFrequency(entries) {\n    const tags = {};\n    \n    entries.forEach(entry => {\n      entry.tags.forEach(tag => {\n        if (!tags[tag]) {\n          tags[tag] = 0;\n        }\n        tags[tag] += 1;\n      });\n    });\n    \n    return tags;\n  }\n\n  /**\n   * Get date string (YYYY-MM-DD) from Date object\n   * @param {Date} date - The date\n   * @returns {String} - Date string\n   */\n  getDateString(date) {\n    return date.toISOString().split('T')[0];\n  }\n}\n\nexport default HealthDataController;\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}