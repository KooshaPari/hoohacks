{"ast":null,"code":"import HealthData from '../models/HealthData';\n\n/**\r\n * HealthDataController - Handles business logic for health data\r\n */\nclass HealthDataController {\n  constructor() {\n    this.healthData = new HealthData();\n    this.loadMockData();\n  }\n\n  /**\r\n   * Load mock data for demo purposes\r\n   */\n  loadMockData() {\n    // Mock journal entries\n    const journalEntries = [{\n      id: '1',\n      timestamp: new Date('2025-03-25T08:30:00').toISOString(),\n      mood: 3,\n      energy: 2,\n      symptoms: [{\n        name: 'Headache',\n        severity: 6\n      }],\n      notes: 'Slept poorly last night. Busy day with back-to-back meetings.',\n      tags: ['stress', 'poor_sleep']\n    }, {\n      id: '2',\n      timestamp: new Date('2025-03-26T09:15:00').toISOString(),\n      mood: 3,\n      energy: 3,\n      symptoms: [],\n      notes: 'Feeling better today. Made time for breakfast.',\n      tags: []\n    }, {\n      id: '3',\n      timestamp: new Date('2025-03-27T08:45:00').toISOString(),\n      mood: 4,\n      energy: 4,\n      symptoms: [],\n      notes: 'Productive day. Took a walk during lunch break.',\n      tags: ['good_day']\n    }, {\n      id: '4',\n      timestamp: new Date('2025-03-28T07:30:00').toISOString(),\n      mood: 3,\n      energy: 3,\n      symptoms: [],\n      notes: 'Normal day. Nothing special to report.',\n      tags: []\n    }, {\n      id: '5',\n      timestamp: new Date('2025-03-29T08:00:00').toISOString(),\n      mood: 2,\n      energy: 2,\n      symptoms: [{\n        name: 'Headache',\n        severity: 7\n      }, {\n        name: 'Fatigue',\n        severity: 6\n      }],\n      notes: 'Skipped breakfast, worked through lunch. Headache started around 2pm.',\n      tags: ['skipped_meals', 'headache']\n    }];\n    journalEntries.forEach(entry => this.healthData.addJournalEntry(entry));\n\n    // Mock sleep data\n    const sleepData = [{\n      timestamp: new Date('2025-03-25T00:00:00').toISOString(),\n      duration: 5.5,\n      quality: 'poor'\n    }, {\n      timestamp: new Date('2025-03-26T00:00:00').toISOString(),\n      duration: 6.5,\n      quality: 'fair'\n    }, {\n      timestamp: new Date('2025-03-27T00:00:00').toISOString(),\n      duration: 7.2,\n      quality: 'good'\n    }, {\n      timestamp: new Date('2025-03-28T00:00:00').toISOString(),\n      duration: 6.8,\n      quality: 'fair'\n    }, {\n      timestamp: new Date('2025-03-29T00:00:00').toISOString(),\n      duration: 6.1,\n      quality: 'fair'\n    }];\n    sleepData.forEach(data => this.healthData.addHealthMetric('sleep', data));\n\n    // Mock activity data\n    const activityData = [{\n      timestamp: new Date('2025-03-25T00:00:00').toISOString(),\n      steps: 4200,\n      activeCalories: 180\n    }, {\n      timestamp: new Date('2025-03-26T00:00:00').toISOString(),\n      steps: 6500,\n      activeCalories: 240\n    }, {\n      timestamp: new Date('2025-03-27T00:00:00').toISOString(),\n      steps: 9100,\n      activeCalories: 320\n    }, {\n      timestamp: new Date('2025-03-28T00:00:00').toISOString(),\n      steps: 7200,\n      activeCalories: 270\n    }, {\n      timestamp: new Date('2025-03-29T00:00:00').toISOString(),\n      steps: 3800,\n      activeCalories: 150\n    }];\n    activityData.forEach(data => this.healthData.addHealthMetric('activity', data));\n\n    // Mock heart rate data\n    const heartRateData = [{\n      timestamp: new Date('2025-03-25T00:00:00').toISOString(),\n      resting: 72\n    }, {\n      timestamp: new Date('2025-03-26T00:00:00').toISOString(),\n      resting: 70\n    }, {\n      timestamp: new Date('2025-03-27T00:00:00').toISOString(),\n      resting: 68\n    }, {\n      timestamp: new Date('2025-03-28T00:00:00').toISOString(),\n      resting: 69\n    }, {\n      timestamp: new Date('2025-03-29T00:00:00').toISOString(),\n      resting: 74\n    }];\n    heartRateData.forEach(data => this.healthData.addHealthMetric('heartRate', data));\n  }\n\n  /**\r\n   * Get a summary of health data for a specific date range\r\n   * @param {Date} startDate - Start of date range\r\n   * @param {Date} endDate - End of date range\r\n   * @returns {Object} - Summary of health data\r\n   */\n  getHealthSummary(startDate, endDate) {\n    const journalEntries = this.healthData.getJournalEntriesInRange(startDate, endDate);\n    const sleepData = this.healthData.getHealthMetricsInRange('sleep', startDate, endDate);\n    const activityData = this.healthData.getHealthMetricsInRange('activity', startDate, endDate);\n    const heartRateData = this.healthData.getHealthMetricsInRange('heartRate', startDate, endDate);\n\n    // Calculate summary statistics\n    const moodAverage = this.calculateAverage(journalEntries.map(entry => entry.mood));\n    const energyAverage = this.calculateAverage(journalEntries.map(entry => entry.energy));\n    const symptomCounts = this.countSymptoms(journalEntries);\n    const sleepAverage = this.calculateAverage(sleepData.map(data => data.duration));\n    const stepsAverage = this.calculateAverage(activityData.map(data => data.steps));\n    const restingHRAverage = this.calculateAverage(heartRateData.map(data => data.resting));\n\n    // Format summary\n    return {\n      period: {\n        start: startDate.toISOString(),\n        end: endDate.toISOString()\n      },\n      entries: journalEntries.length,\n      mood: {\n        average: moodAverage\n      },\n      energy: {\n        average: energyAverage\n      },\n      symptoms: symptomCounts,\n      sleep: {\n        average: sleepAverage\n      },\n      activity: {\n        averageSteps: stepsAverage\n      },\n      heartRate: {\n        averageResting: restingHRAverage\n      }\n    };\n  }\n\n  /**\r\n   * Get data for pattern analysis\r\n   * @param {String} symptom - The symptom to analyze\r\n   * @param {Date} startDate - Start of date range\r\n   * @param {Date} endDate - End of date range\r\n   * @returns {Object} - Pattern analysis data\r\n   */\n  getPatternAnalysis(symptom, startDate, endDate) {\n    const journalEntries = this.healthData.getJournalEntriesInRange(startDate, endDate);\n    const sleepData = this.healthData.getHealthMetricsInRange('sleep', startDate, endDate);\n    const activityData = this.healthData.getHealthMetricsInRange('activity', startDate, endDate);\n\n    // Separate entries with and without the symptom\n    const symptomDays = journalEntries.filter(entry => entry.symptoms.some(s => s.name.toLowerCase() === symptom.toLowerCase()));\n    const nonSymptomDays = journalEntries.filter(entry => !entry.symptoms.some(s => s.name.toLowerCase() === symptom.toLowerCase()));\n\n    // Calculate averages for both groups\n    const symptomSleepAvg = this.calculateAverageForDays(symptomDays, sleepData, 'duration');\n    const nonSymptomSleepAvg = this.calculateAverageForDays(nonSymptomDays, sleepData, 'duration');\n    const symptomStepsAvg = this.calculateAverageForDays(symptomDays, activityData, 'steps');\n    const nonSymptomStepsAvg = this.calculateAverageForDays(nonSymptomDays, activityData, 'steps');\n\n    // Get tags frequency\n    const symptomTags = this.getTagsFrequency(symptomDays);\n    const nonSymptomTags = this.getTagsFrequency(nonSymptomDays);\n    return {\n      symptom,\n      period: {\n        start: startDate.toISOString(),\n        end: endDate.toISOString()\n      },\n      symptomDaysCount: symptomDays.length,\n      nonSymptomDaysCount: nonSymptomDays.length,\n      comparisons: {\n        sleep: {\n          symptomDaysAvg: symptomSleepAvg,\n          nonSymptomDaysAvg: nonSymptomSleepAvg,\n          difference: nonSymptomSleepAvg - symptomSleepAvg\n        },\n        activity: {\n          symptomDaysAvg: symptomStepsAvg,\n          nonSymptomDaysAvg: nonSymptomStepsAvg,\n          difference: nonSymptomStepsAvg - symptomStepsAvg\n        }\n      },\n      tags: {\n        symptomDays: symptomTags,\n        nonSymptomDays: nonSymptomTags\n      }\n    };\n  }\n\n  /**\r\n   * Get the weekly narrative summary\r\n   * @returns {String} - Narrative text\r\n   */\n  getWeeklyNarrative() {\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 7);\n    const summary = this.getHealthSummary(startDate, endDate);\n\n    // Generate a narrative\n    let narrative = \"Your Week in Review\\n\\n\";\n    if (summary.symptoms.Headache) {\n      narrative += `This week, you logged headaches on ${summary.symptoms.Headache.count} days, `;\n      narrative += `typically rating them as moderate to severe (${summary.symptoms.Headache.avgSeverity}/10). `;\n    }\n    narrative += `Your energy levels tended to be higher on days when you slept more than 7 hours `;\n    narrative += `and took more than 8,000 steps. `;\n    if (summary.symptoms.Headache && summary.symptoms.Headache.count > 0) {\n      narrative += `Notably, headache days occurred when you had fewer than 6 hours of sleep `;\n      narrative += `and lower physical activity. Your heart rate was also slightly elevated on these days `;\n      narrative += `compared to your headache-free days.`;\n    }\n    return narrative;\n  }\n\n  /**\r\n   * Get doctor visit summary\r\n   * @returns {Object} - Summary data for doctor visit\r\n   */\n  getDoctorVisitSummary() {\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(startDate.getDate() - 30);\n    const summary = this.getHealthSummary(startDate, endDate);\n    const journalEntries = this.healthData.getJournalEntriesInRange(startDate, endDate);\n\n    // Get all unique symptoms\n    const symptoms = {};\n    journalEntries.forEach(entry => {\n      entry.symptoms.forEach(symptom => {\n        if (!symptoms[symptom.name]) {\n          symptoms[symptom.name] = {\n            occurrences: 0,\n            totalSeverity: 0\n          };\n        }\n        symptoms[symptom.name].occurrences += 1;\n        symptoms[symptom.name].totalSeverity += symptom.severity;\n      });\n    });\n\n    // Calculate average severity\n    Object.keys(symptoms).forEach(name => {\n      symptoms[name].avgSeverity = Math.round(symptoms[name].totalSeverity / symptoms[name].occurrences * 10) / 10;\n    });\n\n    // Format doctor visit summary\n    return {\n      period: {\n        start: startDate.toISOString(),\n        end: endDate.toISOString()\n      },\n      keySymptoms: Object.keys(symptoms).map(name => ({\n        name,\n        occurrences: symptoms[name].occurrences,\n        avgSeverity: symptoms[name].avgSeverity\n      })),\n      overallPatterns: [\"Headaches occurred most frequently on days following less than 6 hours of sleep (75% of instances)\", \"Headaches were reported on 80% of days with \\\"skipped meals\\\" tag\", \"Higher activity levels (>7,000 steps) were associated with fewer symptoms overall\"],\n      questions: [\"Could my headaches be related to my sleep patterns?\", \"Are there specific types of physical activity you'd recommend?\", \"Should I be concerned about the correlation between meals and headaches?\"]\n    };\n  }\n\n  /**\r\n   * Save a new journal entry\r\n   * @param {Object} entry - The journal entry to save\r\n   * @returns {Object} - The saved entry\r\n   */\n  saveJournalEntry(entry) {\n    return this.healthData.addJournalEntry(entry);\n  }\n\n  /**\r\n   * Calculate average value from an array of numbers\r\n   * @param {Array} values - Array of numbers\r\n   * @returns {Number} - The average\r\n   */\n  calculateAverage(values) {\n    if (values.length === 0) return 0;\n    const sum = values.reduce((total, value) => total + value, 0);\n    return Math.round(sum / values.length * 10) / 10;\n  }\n\n  /**\r\n   * Count symptoms from journal entries\r\n   * @param {Array} entries - Journal entries\r\n   * @returns {Object} - Symptom counts and stats\r\n   */\n  countSymptoms(entries) {\n    const symptoms = {};\n    entries.forEach(entry => {\n      entry.symptoms.forEach(symptom => {\n        if (!symptoms[symptom.name]) {\n          symptoms[symptom.name] = {\n            count: 0,\n            totalSeverity: 0\n          };\n        }\n        symptoms[symptom.name].count += 1;\n        symptoms[symptom.name].totalSeverity += symptom.severity;\n      });\n    });\n\n    // Calculate average severity\n    Object.keys(symptoms).forEach(name => {\n      symptoms[name].avgSeverity = Math.round(symptoms[name].totalSeverity / symptoms[name].count * 10) / 10;\n    });\n    return symptoms;\n  }\n\n  /**\r\n   * Calculate average for a specific metric on specific days\r\n   * @param {Array} days - Array of day entries\r\n   * @param {Array} metricData - Array of metric data\r\n   * @param {String} metricKey - The metric key to average\r\n   * @returns {Number} - The average\r\n   */\n  calculateAverageForDays(days, metricData, metricKey) {\n    if (days.length === 0) return 0;\n    const dayTimestamps = days.map(day => this.getDateString(new Date(day.timestamp)));\n    const relevantMetrics = metricData.filter(metric => dayTimestamps.includes(this.getDateString(new Date(metric.timestamp))));\n    return this.calculateAverage(relevantMetrics.map(metric => metric[metricKey]));\n  }\n\n  /**\r\n   * Get the frequency of tags in journal entries\r\n   * @param {Array} entries - Journal entries\r\n   * @returns {Object} - Tag frequencies\r\n   */\n  getTagsFrequency(entries) {\n    const tags = {};\n    entries.forEach(entry => {\n      entry.tags.forEach(tag => {\n        if (!tags[tag]) {\n          tags[tag] = 0;\n        }\n        tags[tag] += 1;\n      });\n    });\n    return tags;\n  }\n\n  /**\r\n   * Get date string (YYYY-MM-DD) from Date object\r\n   * @param {Date} date - The date\r\n   * @returns {String} - Date string\r\n   */\n  getDateString(date) {\n    return date.toISOString().split('T')[0];\n  }\n}\nexport default HealthDataController;","map":{"version":3,"names":["HealthData","HealthDataController","constructor","healthData","loadMockData","journalEntries","id","timestamp","Date","toISOString","mood","energy","symptoms","name","severity","notes","tags","forEach","entry","addJournalEntry","sleepData","duration","quality","data","addHealthMetric","activityData","steps","activeCalories","heartRateData","resting","getHealthSummary","startDate","endDate","getJournalEntriesInRange","getHealthMetricsInRange","moodAverage","calculateAverage","map","energyAverage","symptomCounts","countSymptoms","sleepAverage","stepsAverage","restingHRAverage","period","start","end","entries","length","average","sleep","activity","averageSteps","heartRate","averageResting","getPatternAnalysis","symptom","symptomDays","filter","some","s","toLowerCase","nonSymptomDays","symptomSleepAvg","calculateAverageForDays","nonSymptomSleepAvg","symptomStepsAvg","nonSymptomStepsAvg","symptomTags","getTagsFrequency","nonSymptomTags","symptomDaysCount","nonSymptomDaysCount","comparisons","symptomDaysAvg","nonSymptomDaysAvg","difference","getWeeklyNarrative","setDate","getDate","summary","narrative","Headache","count","avgSeverity","getDoctorVisitSummary","occurrences","totalSeverity","Object","keys","Math","round","keySymptoms","overallPatterns","questions","saveJournalEntry","values","sum","reduce","total","value","days","metricData","metricKey","dayTimestamps","day","getDateString","relevantMetrics","metric","includes","tag","date","split"],"sources":["C:/Users/xiezh/OneDrive/Desktop/code/mlh-hackathon/hoohacks/health_sync_flutter/src/controllers/HealthDataController.js"],"sourcesContent":["import HealthData from '../models/HealthData';\r\n\r\n/**\r\n * HealthDataController - Handles business logic for health data\r\n */\r\nclass HealthDataController {\r\n  constructor() {\r\n    this.healthData = new HealthData();\r\n    this.loadMockData();\r\n  }\r\n\r\n  /**\r\n   * Load mock data for demo purposes\r\n   */\r\n  loadMockData() {\r\n    // Mock journal entries\r\n    const journalEntries = [\r\n      {\r\n        id: '1',\r\n        timestamp: new Date('2025-03-25T08:30:00').toISOString(),\r\n        mood: 3,\r\n        energy: 2,\r\n        symptoms: [{name: 'Headache', severity: 6}],\r\n        notes: 'Slept poorly last night. Busy day with back-to-back meetings.',\r\n        tags: ['stress', 'poor_sleep']\r\n      },\r\n      {\r\n        id: '2',\r\n        timestamp: new Date('2025-03-26T09:15:00').toISOString(),\r\n        mood: 3,\r\n        energy: 3,\r\n        symptoms: [],\r\n        notes: 'Feeling better today. Made time for breakfast.',\r\n        tags: []\r\n      },\r\n      {\r\n        id: '3',\r\n        timestamp: new Date('2025-03-27T08:45:00').toISOString(),\r\n        mood: 4,\r\n        energy: 4,\r\n        symptoms: [],\r\n        notes: 'Productive day. Took a walk during lunch break.',\r\n        tags: ['good_day']\r\n      },\r\n      {\r\n        id: '4',\r\n        timestamp: new Date('2025-03-28T07:30:00').toISOString(),\r\n        mood: 3,\r\n        energy: 3,\r\n        symptoms: [],\r\n        notes: 'Normal day. Nothing special to report.',\r\n        tags: []\r\n      },\r\n      {\r\n        id: '5',\r\n        timestamp: new Date('2025-03-29T08:00:00').toISOString(),\r\n        mood: 2,\r\n        energy: 2,\r\n        symptoms: [{name: 'Headache', severity: 7}, {name: 'Fatigue', severity: 6}],\r\n        notes: 'Skipped breakfast, worked through lunch. Headache started around 2pm.',\r\n        tags: ['skipped_meals', 'headache']\r\n      }\r\n    ];\r\n    \r\n    journalEntries.forEach(entry => this.healthData.addJournalEntry(entry));\r\n    \r\n    // Mock sleep data\r\n    const sleepData = [\r\n      { timestamp: new Date('2025-03-25T00:00:00').toISOString(), duration: 5.5, quality: 'poor' },\r\n      { timestamp: new Date('2025-03-26T00:00:00').toISOString(), duration: 6.5, quality: 'fair' },\r\n      { timestamp: new Date('2025-03-27T00:00:00').toISOString(), duration: 7.2, quality: 'good' },\r\n      { timestamp: new Date('2025-03-28T00:00:00').toISOString(), duration: 6.8, quality: 'fair' },\r\n      { timestamp: new Date('2025-03-29T00:00:00').toISOString(), duration: 6.1, quality: 'fair' }\r\n    ];\r\n    \r\n    sleepData.forEach(data => this.healthData.addHealthMetric('sleep', data));\r\n    \r\n    // Mock activity data\r\n    const activityData = [\r\n      { timestamp: new Date('2025-03-25T00:00:00').toISOString(), steps: 4200, activeCalories: 180 },\r\n      { timestamp: new Date('2025-03-26T00:00:00').toISOString(), steps: 6500, activeCalories: 240 },\r\n      { timestamp: new Date('2025-03-27T00:00:00').toISOString(), steps: 9100, activeCalories: 320 },\r\n      { timestamp: new Date('2025-03-28T00:00:00').toISOString(), steps: 7200, activeCalories: 270 },\r\n      { timestamp: new Date('2025-03-29T00:00:00').toISOString(), steps: 3800, activeCalories: 150 }\r\n    ];\r\n    \r\n    activityData.forEach(data => this.healthData.addHealthMetric('activity', data));\r\n    \r\n    // Mock heart rate data\r\n    const heartRateData = [\r\n      { timestamp: new Date('2025-03-25T00:00:00').toISOString(), resting: 72 },\r\n      { timestamp: new Date('2025-03-26T00:00:00').toISOString(), resting: 70 },\r\n      { timestamp: new Date('2025-03-27T00:00:00').toISOString(), resting: 68 },\r\n      { timestamp: new Date('2025-03-28T00:00:00').toISOString(), resting: 69 },\r\n      { timestamp: new Date('2025-03-29T00:00:00').toISOString(), resting: 74 }\r\n    ];\r\n    \r\n    heartRateData.forEach(data => this.healthData.addHealthMetric('heartRate', data));\r\n  }\r\n\r\n  /**\r\n   * Get a summary of health data for a specific date range\r\n   * @param {Date} startDate - Start of date range\r\n   * @param {Date} endDate - End of date range\r\n   * @returns {Object} - Summary of health data\r\n   */\r\n  getHealthSummary(startDate, endDate) {\r\n    const journalEntries = this.healthData.getJournalEntriesInRange(startDate, endDate);\r\n    const sleepData = this.healthData.getHealthMetricsInRange('sleep', startDate, endDate);\r\n    const activityData = this.healthData.getHealthMetricsInRange('activity', startDate, endDate);\r\n    const heartRateData = this.healthData.getHealthMetricsInRange('heartRate', startDate, endDate);\r\n    \r\n    // Calculate summary statistics\r\n    const moodAverage = this.calculateAverage(journalEntries.map(entry => entry.mood));\r\n    const energyAverage = this.calculateAverage(journalEntries.map(entry => entry.energy));\r\n    const symptomCounts = this.countSymptoms(journalEntries);\r\n    const sleepAverage = this.calculateAverage(sleepData.map(data => data.duration));\r\n    const stepsAverage = this.calculateAverage(activityData.map(data => data.steps));\r\n    const restingHRAverage = this.calculateAverage(heartRateData.map(data => data.resting));\r\n    \r\n    // Format summary\r\n    return {\r\n      period: {\r\n        start: startDate.toISOString(),\r\n        end: endDate.toISOString()\r\n      },\r\n      entries: journalEntries.length,\r\n      mood: {\r\n        average: moodAverage\r\n      },\r\n      energy: {\r\n        average: energyAverage\r\n      },\r\n      symptoms: symptomCounts,\r\n      sleep: {\r\n        average: sleepAverage\r\n      },\r\n      activity: {\r\n        averageSteps: stepsAverage\r\n      },\r\n      heartRate: {\r\n        averageResting: restingHRAverage\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get data for pattern analysis\r\n   * @param {String} symptom - The symptom to analyze\r\n   * @param {Date} startDate - Start of date range\r\n   * @param {Date} endDate - End of date range\r\n   * @returns {Object} - Pattern analysis data\r\n   */\r\n  getPatternAnalysis(symptom, startDate, endDate) {\r\n    const journalEntries = this.healthData.getJournalEntriesInRange(startDate, endDate);\r\n    const sleepData = this.healthData.getHealthMetricsInRange('sleep', startDate, endDate);\r\n    const activityData = this.healthData.getHealthMetricsInRange('activity', startDate, endDate);\r\n    \r\n    // Separate entries with and without the symptom\r\n    const symptomDays = journalEntries.filter(entry => \r\n      entry.symptoms.some(s => s.name.toLowerCase() === symptom.toLowerCase())\r\n    );\r\n    \r\n    const nonSymptomDays = journalEntries.filter(entry => \r\n      !entry.symptoms.some(s => s.name.toLowerCase() === symptom.toLowerCase())\r\n    );\r\n    \r\n    // Calculate averages for both groups\r\n    const symptomSleepAvg = this.calculateAverageForDays(symptomDays, sleepData, 'duration');\r\n    const nonSymptomSleepAvg = this.calculateAverageForDays(nonSymptomDays, sleepData, 'duration');\r\n    \r\n    const symptomStepsAvg = this.calculateAverageForDays(symptomDays, activityData, 'steps');\r\n    const nonSymptomStepsAvg = this.calculateAverageForDays(nonSymptomDays, activityData, 'steps');\r\n    \r\n    // Get tags frequency\r\n    const symptomTags = this.getTagsFrequency(symptomDays);\r\n    const nonSymptomTags = this.getTagsFrequency(nonSymptomDays);\r\n    \r\n    return {\r\n      symptom,\r\n      period: {\r\n        start: startDate.toISOString(),\r\n        end: endDate.toISOString()\r\n      },\r\n      symptomDaysCount: symptomDays.length,\r\n      nonSymptomDaysCount: nonSymptomDays.length,\r\n      comparisons: {\r\n        sleep: {\r\n          symptomDaysAvg: symptomSleepAvg,\r\n          nonSymptomDaysAvg: nonSymptomSleepAvg,\r\n          difference: nonSymptomSleepAvg - symptomSleepAvg\r\n        },\r\n        activity: {\r\n          symptomDaysAvg: symptomStepsAvg,\r\n          nonSymptomDaysAvg: nonSymptomStepsAvg,\r\n          difference: nonSymptomStepsAvg - symptomStepsAvg\r\n        }\r\n      },\r\n      tags: {\r\n        symptomDays: symptomTags,\r\n        nonSymptomDays: nonSymptomTags\r\n      }\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get the weekly narrative summary\r\n   * @returns {String} - Narrative text\r\n   */\r\n  getWeeklyNarrative() {\r\n    const endDate = new Date();\r\n    const startDate = new Date();\r\n    startDate.setDate(startDate.getDate() - 7);\r\n    \r\n    const summary = this.getHealthSummary(startDate, endDate);\r\n    \r\n    // Generate a narrative\r\n    let narrative = \"Your Week in Review\\n\\n\";\r\n    \r\n    if (summary.symptoms.Headache) {\r\n      narrative += `This week, you logged headaches on ${summary.symptoms.Headache.count} days, `;\r\n      narrative += `typically rating them as moderate to severe (${summary.symptoms.Headache.avgSeverity}/10). `;\r\n    }\r\n    \r\n    narrative += `Your energy levels tended to be higher on days when you slept more than 7 hours `;\r\n    narrative += `and took more than 8,000 steps. `;\r\n    \r\n    if (summary.symptoms.Headache && summary.symptoms.Headache.count > 0) {\r\n      narrative += `Notably, headache days occurred when you had fewer than 6 hours of sleep `;\r\n      narrative += `and lower physical activity. Your heart rate was also slightly elevated on these days `;\r\n      narrative += `compared to your headache-free days.`;\r\n    }\r\n    \r\n    return narrative;\r\n  }\r\n\r\n  /**\r\n   * Get doctor visit summary\r\n   * @returns {Object} - Summary data for doctor visit\r\n   */\r\n  getDoctorVisitSummary() {\r\n    const endDate = new Date();\r\n    const startDate = new Date();\r\n    startDate.setDate(startDate.getDate() - 30);\r\n    \r\n    const summary = this.getHealthSummary(startDate, endDate);\r\n    const journalEntries = this.healthData.getJournalEntriesInRange(startDate, endDate);\r\n    \r\n    // Get all unique symptoms\r\n    const symptoms = {};\r\n    journalEntries.forEach(entry => {\r\n      entry.symptoms.forEach(symptom => {\r\n        if (!symptoms[symptom.name]) {\r\n          symptoms[symptom.name] = {\r\n            occurrences: 0,\r\n            totalSeverity: 0\r\n          };\r\n        }\r\n        symptoms[symptom.name].occurrences += 1;\r\n        symptoms[symptom.name].totalSeverity += symptom.severity;\r\n      });\r\n    });\r\n    \r\n    // Calculate average severity\r\n    Object.keys(symptoms).forEach(name => {\r\n      symptoms[name].avgSeverity = \r\n        Math.round((symptoms[name].totalSeverity / symptoms[name].occurrences) * 10) / 10;\r\n    });\r\n    \r\n    // Format doctor visit summary\r\n    return {\r\n      period: {\r\n        start: startDate.toISOString(),\r\n        end: endDate.toISOString()\r\n      },\r\n      keySymptoms: Object.keys(symptoms).map(name => ({\r\n        name,\r\n        occurrences: symptoms[name].occurrences,\r\n        avgSeverity: symptoms[name].avgSeverity\r\n      })),\r\n      overallPatterns: [\r\n        \"Headaches occurred most frequently on days following less than 6 hours of sleep (75% of instances)\",\r\n        \"Headaches were reported on 80% of days with \\\"skipped meals\\\" tag\",\r\n        \"Higher activity levels (>7,000 steps) were associated with fewer symptoms overall\"\r\n      ],\r\n      questions: [\r\n        \"Could my headaches be related to my sleep patterns?\",\r\n        \"Are there specific types of physical activity you'd recommend?\",\r\n        \"Should I be concerned about the correlation between meals and headaches?\"\r\n      ]\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Save a new journal entry\r\n   * @param {Object} entry - The journal entry to save\r\n   * @returns {Object} - The saved entry\r\n   */\r\n  saveJournalEntry(entry) {\r\n    return this.healthData.addJournalEntry(entry);\r\n  }\r\n\r\n  /**\r\n   * Calculate average value from an array of numbers\r\n   * @param {Array} values - Array of numbers\r\n   * @returns {Number} - The average\r\n   */\r\n  calculateAverage(values) {\r\n    if (values.length === 0) return 0;\r\n    const sum = values.reduce((total, value) => total + value, 0);\r\n    return Math.round((sum / values.length) * 10) / 10;\r\n  }\r\n\r\n  /**\r\n   * Count symptoms from journal entries\r\n   * @param {Array} entries - Journal entries\r\n   * @returns {Object} - Symptom counts and stats\r\n   */\r\n  countSymptoms(entries) {\r\n    const symptoms = {};\r\n    \r\n    entries.forEach(entry => {\r\n      entry.symptoms.forEach(symptom => {\r\n        if (!symptoms[symptom.name]) {\r\n          symptoms[symptom.name] = {\r\n            count: 0,\r\n            totalSeverity: 0\r\n          };\r\n        }\r\n        symptoms[symptom.name].count += 1;\r\n        symptoms[symptom.name].totalSeverity += symptom.severity;\r\n      });\r\n    });\r\n    \r\n    // Calculate average severity\r\n    Object.keys(symptoms).forEach(name => {\r\n      symptoms[name].avgSeverity = \r\n        Math.round((symptoms[name].totalSeverity / symptoms[name].count) * 10) / 10;\r\n    });\r\n    \r\n    return symptoms;\r\n  }\r\n\r\n  /**\r\n   * Calculate average for a specific metric on specific days\r\n   * @param {Array} days - Array of day entries\r\n   * @param {Array} metricData - Array of metric data\r\n   * @param {String} metricKey - The metric key to average\r\n   * @returns {Number} - The average\r\n   */\r\n  calculateAverageForDays(days, metricData, metricKey) {\r\n    if (days.length === 0) return 0;\r\n    \r\n    const dayTimestamps = days.map(day => this.getDateString(new Date(day.timestamp)));\r\n    const relevantMetrics = metricData.filter(metric => \r\n      dayTimestamps.includes(this.getDateString(new Date(metric.timestamp)))\r\n    );\r\n    \r\n    return this.calculateAverage(relevantMetrics.map(metric => metric[metricKey]));\r\n  }\r\n\r\n  /**\r\n   * Get the frequency of tags in journal entries\r\n   * @param {Array} entries - Journal entries\r\n   * @returns {Object} - Tag frequencies\r\n   */\r\n  getTagsFrequency(entries) {\r\n    const tags = {};\r\n    \r\n    entries.forEach(entry => {\r\n      entry.tags.forEach(tag => {\r\n        if (!tags[tag]) {\r\n          tags[tag] = 0;\r\n        }\r\n        tags[tag] += 1;\r\n      });\r\n    });\r\n    \r\n    return tags;\r\n  }\r\n\r\n  /**\r\n   * Get date string (YYYY-MM-DD) from Date object\r\n   * @param {Date} date - The date\r\n   * @returns {String} - Date string\r\n   */\r\n  getDateString(date) {\r\n    return date.toISOString().split('T')[0];\r\n  }\r\n}\r\n\r\nexport default HealthDataController;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}