{"ast":null,"code":"import HealthDataController from'../controllers/HealthDataController';/**\r\n * DoctorVisitPresenter - Handles presenting data for the Doctor Visit view\r\n */class DoctorVisitPresenter{constructor(){this.healthDataController=new HealthDataController();}/**\r\n   * Get doctor visit summary data\r\n   * @returns {Object} - Doctor visit summary data\r\n   */getDoctorVisitSummary(){const summary=this.healthDataController.getDoctorVisitSummary();// Format the data for presentation\nreturn{period:{start:new Date(summary.period.start).toLocaleDateString(),end:new Date(summary.period.end).toLocaleDateString()},keySymptoms:summary.keySymptoms.map(symptom=>({name:symptom.name,occurrences:symptom.occurrences,avgSeverity:symptom.avgSeverity})),overallPatterns:summary.overallPatterns,questions:summary.questions};}/**\r\n   * Add a question to the doctor visit summary\r\n   * @param {String} question - The question to add\r\n   * @returns {Array} - Updated list of questions\r\n   */addQuestion(question){// In a real implementation, this would update the model\n// For this MVP, we'll just return a mock updated list\nconst summary=this.healthDataController.getDoctorVisitSummary();return[...summary.questions,question];}/**\r\n   * Generate a printable/shareable version of the summary\r\n   * @returns {String} - Formatted summary text\r\n   */generateShareableText(){const summary=this.healthDataController.getDoctorVisitSummary();let text=`Health Summary: ${new Date(summary.period.start).toLocaleDateString()} - ${new Date(summary.period.end).toLocaleDateString()}\\n\\n`;text+=\"Key Symptoms Reported:\\n\";summary.keySymptoms.forEach(symptom=>{text+=`- ${symptom.name}: ${symptom.occurrences} occurrences (avg. severity ${symptom.avgSeverity}/10)\\n`;});text+=\"\\nOverall Patterns:\\n\";summary.overallPatterns.forEach(pattern=>{text+=`- ${pattern}\\n`;});text+=\"\\nQuestions for Doctor:\\n\";summary.questions.forEach(question=>{text+=`- ${question}\\n`;});return text;}}export default DoctorVisitPresenter;","map":{"version":3,"names":["HealthDataController","DoctorVisitPresenter","constructor","healthDataController","getDoctorVisitSummary","summary","period","start","Date","toLocaleDateString","end","keySymptoms","map","symptom","name","occurrences","avgSeverity","overallPatterns","questions","addQuestion","question","generateShareableText","text","forEach","pattern"],"sources":["C:/Users/xiezh/OneDrive/Desktop/code/mlh-hackathon/hoohacks/health_sync_flutter/src/presenters/DoctorVisitPresenter.js"],"sourcesContent":["import HealthDataController from '../controllers/HealthDataController';\r\n\r\n/**\r\n * DoctorVisitPresenter - Handles presenting data for the Doctor Visit view\r\n */\r\nclass DoctorVisitPresenter {\r\n  constructor() {\r\n    this.healthDataController = new HealthDataController();\r\n  }\r\n\r\n  /**\r\n   * Get doctor visit summary data\r\n   * @returns {Object} - Doctor visit summary data\r\n   */\r\n  getDoctorVisitSummary() {\r\n    const summary = this.healthDataController.getDoctorVisitSummary();\r\n    \r\n    // Format the data for presentation\r\n    return {\r\n      period: {\r\n        start: new Date(summary.period.start).toLocaleDateString(),\r\n        end: new Date(summary.period.end).toLocaleDateString()\r\n      },\r\n      keySymptoms: summary.keySymptoms.map(symptom => ({\r\n        name: symptom.name,\r\n        occurrences: symptom.occurrences,\r\n        avgSeverity: symptom.avgSeverity\r\n      })),\r\n      overallPatterns: summary.overallPatterns,\r\n      questions: summary.questions\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Add a question to the doctor visit summary\r\n   * @param {String} question - The question to add\r\n   * @returns {Array} - Updated list of questions\r\n   */\r\n  addQuestion(question) {\r\n    // In a real implementation, this would update the model\r\n    // For this MVP, we'll just return a mock updated list\r\n    const summary = this.healthDataController.getDoctorVisitSummary();\r\n    return [...summary.questions, question];\r\n  }\r\n\r\n  /**\r\n   * Generate a printable/shareable version of the summary\r\n   * @returns {String} - Formatted summary text\r\n   */\r\n  generateShareableText() {\r\n    const summary = this.healthDataController.getDoctorVisitSummary();\r\n    \r\n    let text = `Health Summary: ${new Date(summary.period.start).toLocaleDateString()} - ${new Date(summary.period.end).toLocaleDateString()}\\n\\n`;\r\n    \r\n    text += \"Key Symptoms Reported:\\n\";\r\n    summary.keySymptoms.forEach(symptom => {\r\n      text += `- ${symptom.name}: ${symptom.occurrences} occurrences (avg. severity ${symptom.avgSeverity}/10)\\n`;\r\n    });\r\n    \r\n    text += \"\\nOverall Patterns:\\n\";\r\n    summary.overallPatterns.forEach(pattern => {\r\n      text += `- ${pattern}\\n`;\r\n    });\r\n    \r\n    text += \"\\nQuestions for Doctor:\\n\";\r\n    summary.questions.forEach(question => {\r\n      text += `- ${question}\\n`;\r\n    });\r\n    \r\n    return text;\r\n  }\r\n}\r\n\r\nexport default DoctorVisitPresenter;\r\n"],"mappings":"AAAA,MAAO,CAAAA,oBAAoB,KAAM,qCAAqC,CAEtE;AACA;AACA,GACA,KAAM,CAAAC,oBAAqB,CACzBC,WAAWA,CAAA,CAAG,CACZ,IAAI,CAACC,oBAAoB,CAAG,GAAI,CAAAH,oBAAoB,CAAC,CAAC,CACxD,CAEA;AACF;AACA;AACA,KACEI,qBAAqBA,CAAA,CAAG,CACtB,KAAM,CAAAC,OAAO,CAAG,IAAI,CAACF,oBAAoB,CAACC,qBAAqB,CAAC,CAAC,CAEjE;AACA,MAAO,CACLE,MAAM,CAAE,CACNC,KAAK,CAAE,GAAI,CAAAC,IAAI,CAACH,OAAO,CAACC,MAAM,CAACC,KAAK,CAAC,CAACE,kBAAkB,CAAC,CAAC,CAC1DC,GAAG,CAAE,GAAI,CAAAF,IAAI,CAACH,OAAO,CAACC,MAAM,CAACI,GAAG,CAAC,CAACD,kBAAkB,CAAC,CACvD,CAAC,CACDE,WAAW,CAAEN,OAAO,CAACM,WAAW,CAACC,GAAG,CAACC,OAAO,GAAK,CAC/CC,IAAI,CAAED,OAAO,CAACC,IAAI,CAClBC,WAAW,CAAEF,OAAO,CAACE,WAAW,CAChCC,WAAW,CAAEH,OAAO,CAACG,WACvB,CAAC,CAAC,CAAC,CACHC,eAAe,CAAEZ,OAAO,CAACY,eAAe,CACxCC,SAAS,CAAEb,OAAO,CAACa,SACrB,CAAC,CACH,CAEA;AACF;AACA;AACA;AACA,KACEC,WAAWA,CAACC,QAAQ,CAAE,CACpB;AACA;AACA,KAAM,CAAAf,OAAO,CAAG,IAAI,CAACF,oBAAoB,CAACC,qBAAqB,CAAC,CAAC,CACjE,MAAO,CAAC,GAAGC,OAAO,CAACa,SAAS,CAAEE,QAAQ,CAAC,CACzC,CAEA;AACF;AACA;AACA,KACEC,qBAAqBA,CAAA,CAAG,CACtB,KAAM,CAAAhB,OAAO,CAAG,IAAI,CAACF,oBAAoB,CAACC,qBAAqB,CAAC,CAAC,CAEjE,GAAI,CAAAkB,IAAI,CAAG,mBAAmB,GAAI,CAAAd,IAAI,CAACH,OAAO,CAACC,MAAM,CAACC,KAAK,CAAC,CAACE,kBAAkB,CAAC,CAAC,MAAM,GAAI,CAAAD,IAAI,CAACH,OAAO,CAACC,MAAM,CAACI,GAAG,CAAC,CAACD,kBAAkB,CAAC,CAAC,MAAM,CAE9Ia,IAAI,EAAI,0BAA0B,CAClCjB,OAAO,CAACM,WAAW,CAACY,OAAO,CAACV,OAAO,EAAI,CACrCS,IAAI,EAAI,KAAKT,OAAO,CAACC,IAAI,KAAKD,OAAO,CAACE,WAAW,+BAA+BF,OAAO,CAACG,WAAW,QAAQ,CAC7G,CAAC,CAAC,CAEFM,IAAI,EAAI,uBAAuB,CAC/BjB,OAAO,CAACY,eAAe,CAACM,OAAO,CAACC,OAAO,EAAI,CACzCF,IAAI,EAAI,KAAKE,OAAO,IAAI,CAC1B,CAAC,CAAC,CAEFF,IAAI,EAAI,2BAA2B,CACnCjB,OAAO,CAACa,SAAS,CAACK,OAAO,CAACH,QAAQ,EAAI,CACpCE,IAAI,EAAI,KAAKF,QAAQ,IAAI,CAC3B,CAAC,CAAC,CAEF,MAAO,CAAAE,IAAI,CACb,CACF,CAEA,cAAe,CAAArB,oBAAoB","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}