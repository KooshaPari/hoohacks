{"ast":null,"code":"import HealthDataController from '../controllers/HealthDataController';\n\n/**\r\n * WeeklySummaryPresenter - Handles presenting data for the Weekly Summary view\r\n */\nclass WeeklySummaryPresenter {\n  constructor() {\n    this.healthDataController = new HealthDataController();\n  }\n\n  /**\r\n   * Get weekly summary data\r\n   * @returns {Object} - Weekly summary data\r\n   */\n  getWeeklySummaryData() {\n    const endDate = new Date();\n    const startDate = new Date();\n    startDate.setDate(endDate.getDate() - 7);\n    const summary = this.healthDataController.getHealthSummary(startDate, endDate);\n    const narrative = this.healthDataController.getWeeklyNarrative();\n\n    // Get daily data for charts\n    const sleepData = this.healthDataController.healthData.getHealthMetricsInRange('sleep', startDate, endDate);\n    const activityData = this.healthDataController.healthData.getHealthMetricsInRange('activity', startDate, endDate);\n    const journalEntries = this.healthDataController.healthData.getJournalEntriesInRange(startDate, endDate);\n\n    // Format chart data\n    const chartData = {\n      labels: this.getDayLabels(startDate, endDate),\n      sleep: this.formatDailyData(sleepData, 'duration'),\n      steps: this.formatDailyData(activityData, 'steps'),\n      mood: this.formatDailyData(journalEntries, 'mood'),\n      energy: this.formatDailyData(journalEntries, 'energy')\n    };\n    return {\n      summary,\n      narrative,\n      chartData\n    };\n  }\n\n  /**\r\n   * Get day labels for chart\r\n   * @param {Date} startDate - Start date\r\n   * @param {Date} endDate - End date\r\n   * @returns {Array} - Array of day labels\r\n   */\n  getDayLabels(startDate, endDate) {\n    const days = [];\n    const currentDate = new Date(startDate);\n    while (currentDate <= endDate) {\n      days.push(this.formatDateLabel(currentDate));\n      currentDate.setDate(currentDate.getDate() + 1);\n    }\n    return days;\n  }\n\n  /**\r\n   * Format daily data for charts\r\n   * @param {Array} data - Array of data entries\r\n   * @param {String} valueKey - The key to extract values from\r\n   * @returns {Array} - Formatted daily values\r\n   */\n  formatDailyData(data, valueKey) {\n    const dayValues = {};\n\n    // Initialize with empty values\n    const days = this.getDayLabels(new Date(new Date().setDate(new Date().getDate() - 7)), new Date());\n    days.forEach(day => {\n      dayValues[day] = null;\n    });\n\n    // Fill in actual values\n    data.forEach(item => {\n      const date = this.formatDateLabel(new Date(item.timestamp));\n      if (dayValues[date] !== undefined) {\n        // For journal entries, use the value directly\n        if (valueKey === 'mood' || valueKey === 'energy') {\n          dayValues[date] = item[valueKey];\n        } else {\n          // For health metrics, access the property\n          dayValues[date] = item[valueKey];\n        }\n      }\n    });\n    return Object.values(dayValues);\n  }\n\n  /**\r\n   * Format date as a label (e.g., \"Mon 3/29\")\r\n   * @param {Date} date - The date to format\r\n   * @returns {String} - Formatted date label\r\n   */\n  formatDateLabel(date) {\n    const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\n    return `${days[date.getDay()]} ${date.getMonth() + 1}/${date.getDate()}`;\n  }\n}\nexport default WeeklySummaryPresenter;","map":{"version":3,"names":["HealthDataController","WeeklySummaryPresenter","constructor","healthDataController","getWeeklySummaryData","endDate","Date","startDate","setDate","getDate","summary","getHealthSummary","narrative","getWeeklyNarrative","sleepData","healthData","getHealthMetricsInRange","activityData","journalEntries","getJournalEntriesInRange","chartData","labels","getDayLabels","sleep","formatDailyData","steps","mood","energy","days","currentDate","push","formatDateLabel","data","valueKey","dayValues","forEach","day","item","date","timestamp","undefined","Object","values","getDay","getMonth"],"sources":["C:/Users/xiezh/OneDrive/Desktop/code/mlh-hackathon/hoohacks/health_sync_flutter/src/presenters/WeeklySummaryPresenter.js"],"sourcesContent":["import HealthDataController from '../controllers/HealthDataController';\r\n\r\n/**\r\n * WeeklySummaryPresenter - Handles presenting data for the Weekly Summary view\r\n */\r\nclass WeeklySummaryPresenter {\r\n  constructor() {\r\n    this.healthDataController = new HealthDataController();\r\n  }\r\n\r\n  /**\r\n   * Get weekly summary data\r\n   * @returns {Object} - Weekly summary data\r\n   */\r\n  getWeeklySummaryData() {\r\n    const endDate = new Date();\r\n    const startDate = new Date();\r\n    startDate.setDate(endDate.getDate() - 7);\r\n    \r\n    const summary = this.healthDataController.getHealthSummary(startDate, endDate);\r\n    const narrative = this.healthDataController.getWeeklyNarrative();\r\n    \r\n    // Get daily data for charts\r\n    const sleepData = this.healthDataController.healthData.getHealthMetricsInRange('sleep', startDate, endDate);\r\n    const activityData = this.healthDataController.healthData.getHealthMetricsInRange('activity', startDate, endDate);\r\n    const journalEntries = this.healthDataController.healthData.getJournalEntriesInRange(startDate, endDate);\r\n    \r\n    // Format chart data\r\n    const chartData = {\r\n      labels: this.getDayLabels(startDate, endDate),\r\n      sleep: this.formatDailyData(sleepData, 'duration'),\r\n      steps: this.formatDailyData(activityData, 'steps'),\r\n      mood: this.formatDailyData(journalEntries, 'mood'),\r\n      energy: this.formatDailyData(journalEntries, 'energy')\r\n    };\r\n    \r\n    return {\r\n      summary,\r\n      narrative,\r\n      chartData\r\n    };\r\n  }\r\n\r\n  /**\r\n   * Get day labels for chart\r\n   * @param {Date} startDate - Start date\r\n   * @param {Date} endDate - End date\r\n   * @returns {Array} - Array of day labels\r\n   */\r\n  getDayLabels(startDate, endDate) {\r\n    const days = [];\r\n    const currentDate = new Date(startDate);\r\n    \r\n    while (currentDate <= endDate) {\r\n      days.push(this.formatDateLabel(currentDate));\r\n      currentDate.setDate(currentDate.getDate() + 1);\r\n    }\r\n    \r\n    return days;\r\n  }\r\n\r\n  /**\r\n   * Format daily data for charts\r\n   * @param {Array} data - Array of data entries\r\n   * @param {String} valueKey - The key to extract values from\r\n   * @returns {Array} - Formatted daily values\r\n   */\r\n  formatDailyData(data, valueKey) {\r\n    const dayValues = {};\r\n    \r\n    // Initialize with empty values\r\n    const days = this.getDayLabels(\r\n      new Date(new Date().setDate(new Date().getDate() - 7)),\r\n      new Date()\r\n    );\r\n    days.forEach(day => {\r\n      dayValues[day] = null;\r\n    });\r\n    \r\n    // Fill in actual values\r\n    data.forEach(item => {\r\n      const date = this.formatDateLabel(new Date(item.timestamp));\r\n      if (dayValues[date] !== undefined) {\r\n        // For journal entries, use the value directly\r\n        if (valueKey === 'mood' || valueKey === 'energy') {\r\n          dayValues[date] = item[valueKey];\r\n        } else {\r\n          // For health metrics, access the property\r\n          dayValues[date] = item[valueKey];\r\n        }\r\n      }\r\n    });\r\n    \r\n    return Object.values(dayValues);\r\n  }\r\n\r\n  /**\r\n   * Format date as a label (e.g., \"Mon 3/29\")\r\n   * @param {Date} date - The date to format\r\n   * @returns {String} - Formatted date label\r\n   */\r\n  formatDateLabel(date) {\r\n    const days = ['Sun', 'Mon', 'Tue', 'Wed', 'Thu', 'Fri', 'Sat'];\r\n    return `${days[date.getDay()]} ${date.getMonth() + 1}/${date.getDate()}`;\r\n  }\r\n}\r\n\r\nexport default WeeklySummaryPresenter;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}