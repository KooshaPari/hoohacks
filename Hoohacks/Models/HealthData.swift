//
//  HealthData.swift
//  Hoohacks
//
//  Created by Koosha Paridehpour on 3/29/25.
//

import Foundation
import SwiftData
import HealthKit

// Main data structures for the HealthSync app

// User journal entry
@Model
final class JournalEntry {
    var date: Date
    var mood: Int // 1-5 scale
    var energy: Int // 1-5 scale
    var notes: String
    var tags: [String]
    
    // Apple Health data that will be associated with this entry
    var sleepHours: Double?
    var stepCount: Int?
    var activeCalories: Double?
    var restingHeartRate: Double?
    
    // Relationships
    @Relationship(deleteRule: .cascade) var symptoms: [Symptom] = []
    
    init(date: Date, mood: Int, energy: Int, notes: String, tags: [String], symptoms: [Symptom] = []) {
        self.date = date
        self.mood = mood
        self.energy = energy
        self.notes = notes
        self.tags = tags
        self.symptoms = symptoms
    }
}

// Symptom tracking
@Model
final class Symptom {
    var name: String
    var severity: Int // 1-10 scale
    var notes: String?
    
    init(name: String, severity: Int, notes: String? = nil) {
        self.name = name
        self.severity = severity
        self.notes = notes
    }
}

// Weekly summary generated by AI
@Model
final class WeeklySummary {
    var startDate: Date
    var endDate: Date
    var narrative: String
    
    // Relationships
    @Relationship(deleteRule: .cascade) var highlightedPatterns: [Pattern] = []
    
    init(startDate: Date, endDate: Date, narrative: String, highlightedPatterns: [Pattern] = []) {
        self.startDate = startDate
        self.endDate = endDate
        self.narrative = narrative
        self.highlightedPatterns = highlightedPatterns
    }
}

// Pattern identified for a specific symptom
@Model
final class Pattern {
    var symptomName: String
    var descr: String
    var correlationStrength: Double // 0-1 scale
    var relatedFactors: [String]
    
    init(symptomName: String, descr: String, correlationStrength: Double, relatedFactors: [String]) {
        self.symptomName = symptomName
        self.descr = descr
        self.correlationStrength = correlationStrength
        self.relatedFactors = relatedFactors
    }
}

// Doctor visit preparation summary
@Model
final class DoctorVisitSummary {
    var startDate: Date
    var endDate: Date
    var overallPatterns: [String]
    var questions: [String]
    
    // Relationships
    @Relationship(deleteRule: .cascade) var keySymptoms: [SymptomSummary] = []
    
    init(startDate: Date, endDate: Date, keySymptoms: [SymptomSummary] = [], overallPatterns: [String], questions: [String]) {
        self.startDate = startDate
        self.endDate = endDate
        self.keySymptoms = keySymptoms
        self.overallPatterns = overallPatterns
        self.questions = questions
    }
}

@Model
final class SymptomSummary {
    var name: String
    var occurrences: Int
    var averageSeverity: Double
    
    init(name: String, occurrences: Int, averageSeverity: Double) {
        self.name = name
        self.occurrences = occurrences
        self.averageSeverity = averageSeverity
    }
}

// Mock data generator for demo purposes
class MockDataGenerator {
    static func createMockJournalEntries(modelContext: ModelContext) {
        // Sample entries for the past week
        let calendar = Calendar.current
        
        // Today minus 7 days
        for i in 0..<7 {
            let date = calendar.date(byAdding: .day, value: -i, to: Date())!
            
            // Alternating good and bad days for demo
            let isGoodDay = i % 2 == 0
            
            var symptoms: [Symptom] = []
            if !isGoodDay {
                let headache = Symptom(name: "Headache", severity: 6, notes: "Started in the afternoon")
                let fatigue = Symptom(name: "Fatigue", severity: 5)
                symptoms = [headache, fatigue]
                modelContext.insert(headache)
                modelContext.insert(fatigue)
            }
            
            let entry = JournalEntry(
                date: date,
                mood: isGoodDay ? 4 : 2,
                energy: isGoodDay ? 4 : 2,
                notes: isGoodDay ? "Productive day. Took a walk during lunch." : "Stressful day. Skipped lunch.",
                tags: isGoodDay ? ["good_day", "active"] : ["stress", "skipped_meals"],
                symptoms: symptoms
            )
            
            entry.sleepHours = isGoodDay ? 7.5 : 5.5
            entry.stepCount = isGoodDay ? 9000 : 4000
            entry.activeCalories = isGoodDay ? 320 : 180
            entry.restingHeartRate = isGoodDay ? 68 : 74
            
            modelContext.insert(entry)
        }
    }
    
    static func createMockWeeklySummary(modelContext: ModelContext) -> WeeklySummary {
        let calendar = Calendar.current
        let endDate = Date()
        let startDate = calendar.date(byAdding: .day, value: -7, to: endDate)!
        
        let patterns = [
            Pattern(
                symptomName: "Headache",
                descr: "You averaged 5.8 hours of sleep on headache days vs. 7.3 hours on headache-free days",
                correlationStrength: 0.85,
                relatedFactors: ["Sleep", "Stress"]
            ),
            Pattern(
                symptomName: "Headache",
                descr: "You tagged 'skipped meals' on 100% of headache days vs. 0% of headache-free days",
                correlationStrength: 0.9,
                relatedFactors: ["Nutrition", "Meal timing"]
            ),
            Pattern(
                symptomName: "Headache",
                descr: "Your step count averaged 4,000 on headache days vs. 8,500 on headache-free days",
                correlationStrength: 0.7,
                relatedFactors: ["Physical activity", "Sedentary behavior"]
            )
        ]
        
        // Insert the patterns into the model context
        for pattern in patterns {
            modelContext.insert(pattern)
        }
        
        let summary = WeeklySummary(
            startDate: startDate,
            endDate: endDate,
            narrative: """
            This week, you logged headaches on 3 days, typically rating them as moderate to severe (6-7/10). 
            Your energy levels tended to be higher on days when you slept more than 7 hours and took more 
            than 8,000 steps. Notably, all headache days occurred when you had fewer than 6 hours of sleep 
            and lower physical activity. Your heart rate was also slightly elevated on these days compared 
            to your headache-free days.
            """,
            highlightedPatterns: patterns
        )
        
        modelContext.insert(summary)
        return summary
    }
    
    static func createMockDoctorVisitSummary(modelContext: ModelContext) -> DoctorVisitSummary {
        let calendar = Calendar.current
        let endDate = Date()
        let startDate = calendar.date(byAdding: .day, value: -30, to: endDate)!
        
        let symptomSummaries = [
            SymptomSummary(name: "Headaches", occurrences: 8, averageSeverity: 6.5),
            SymptomSummary(name: "Fatigue", occurrences: 5, averageSeverity: 5.0),
            SymptomSummary(name: "Digestive Issues", occurrences: 3, averageSeverity: 4.0)
        ]
        
        // Insert the symptom summaries into the model context
        for summary in symptomSummaries {
            modelContext.insert(summary)
        }
        
        let summary = DoctorVisitSummary(
            startDate: startDate,
            endDate: endDate,
            keySymptoms: symptomSummaries,
            overallPatterns: [
                "Headaches occurred most frequently on days following less than 6 hours of sleep (75% of instances)",
                "Headaches were reported on 80% of days with 'skipped meals' tag",
                "Higher activity levels (>7,000 steps) were associated with fewer symptoms overall"
            ],
            questions: [
                "Could my headaches be related to my sleep patterns?",
                "Are there specific types of physical activity you'd recommend?",
                "Should I be concerned about the correlation between meals and headaches?"
            ]
        )
        
        modelContext.insert(summary)
        return summary
    }
}
